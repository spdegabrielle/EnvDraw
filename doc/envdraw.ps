%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: envdraw.dvi
%%Pages: 8
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips envdraw.dvi -o envdraw.ps
%DVIPSParameters: dpi=300, comments removed
%DVIPSSource:  TeX output 1996.02.05:2024
%%BeginProcSet: tex.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]{ch-image}imagemask restore}B /D{/cc X dup type /stringtype ne{]}
if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258437 52099154 1000 300 300 (envdraw.dvi)
@start /Fa 2 84 df<01FFFE00003C03C0003800E0003800F000380070003800700070
00F0007000F0007000F0007001E000E001C000E0078000E01E0000FFF00001C0380001C0
0C0001C00E0001C00E0003800E0003800E0003800E0003800E0007001E0007001E080700
1E0807001E100F000F10FFE00F20000003C01D1D7E9B20>82 D<000FC100303300400F00
800601800603000603000606000406000407000007000007800003F00001FF0000FFC000
3FE00003E00000F00000700000300000302000302000306000606000606000C0600080F0
0300CC060083F800181E7E9C19>I E /Fb 1 53 df<006000E000E00160026006600C60
0860106020606060C060FFFC0060006000600060006003FC0E137F9211>52
D E /Fc 3 108 df<03F0400C0CC01002C03001C06000C0E000C0E00040E00040E00040
F00000F800007E00007FE0003FFC001FFF0007FF80007F800007C00003E00001E00000E0
8000E08000E08000E0C000C0C000C0E00180D00300CE060081F800131E7D9C19>83
D<7FFFFFC0700F01C0600F00C0400F0040400F0040C00F0020800F0020800F0020800F00
20000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F00
00000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000001F80
0003FFFC001B1C7D9B21>I<FF81F81C01E01C01801C01001C02001C04001C08001C1000
1C30001C70001CB8001D1C001E1C001C0E001C07001C07801C03801C01C01C01E01C01F0
FF83FC16157F941A>107 D E /Fd 2 103 df<0387000387000387000387000387000387
007FFFC0FFFFE0FFFFE0070E00070E00070E000E1C000E1C000E1C000E1C00FFFFE0FFFF
E07FFFC01C38001C38001C38001C38001C38001C380013197F9816>35
D<001E00007F0001FF8001C7800383000380000380007FFF00FFFF00FFFF000380000380
000380000380000380000380000380000380000380000380000380000380007FFC00FFFE
007FFC0011197F9816>102 D E /Fe 37 121 df<60F0F0F0F0F0F0F0F0F0F0F0F0F060
0000000060F0F0600417789614>33 D<071C00071C00071C00071C00071C007FFF00FFFF
80FFFF800E38000E38000E38000E38000E38000E38000E3800FFFF80FFFF807FFF001C70
001C70001C70001C70001C700011177F9614>35 D<60F0F878181818303060C080050C78
9614>39 D<0180038006000C001C0018003800700070007000E000E000E000E000E000E0
00E000E000E000700070007000380018001C000C00060003800180091D799914>I<80C0
603038181C0E0E0E0707070707070707070E0E0E1C18383060C080081D7C9914>I<01C0
0001C00001C00001C00001C00001C00001C000FFFF80FFFF80FFFF8001C00001C00001C0
0001C00001C00001C00001C00011117F9314>43 D<FFFEFFFEFFFE0F037E8C14>45
D<07C00FE01C7038383018701C701CE00EE00EE00EE00EE00EE00EE00EE00EE00E701C70
1C383838381C700FE007C00F177E9614>48 D<0300030007000F003F00F7004700070007
000700070007000700070007000700070007000700070007007FF07FF00C177C9614>I<
0FC01FF03838701CE00EE00EE00E400E000E001C001C00380030007000E001C003000600
0C00180E300E7FFE7FFE0F177E9614>I<0FC01FF03838701C701C201C001C0018003800
700FE00FF00038001C000E000E400EE00EE00E701C78383FF00FC00F177E9614>I<0078
0000F80001B80001B8000338000338000638000E38000C38001C38003838003038007038
00E03800FFFF80FFFF8000380000380000380000380000380001FF0001FF0011177F9614
>I<7FFC7FFC700070007000700070007000700077C07FF07838601C000C000E000E400E
E00EE01C601C78783FF00FC00F177E9614>I<01F007F80E1C1C1C381C300070007000E0
00E7C0EFF0F838F01CF00CE00EE00E600E700E700C381C1C380FF007C00F177E9614>I<
E000FFFEFFFEE01CE0380030007000E000C001C001800380038007000700070007000E00
0E000E000E000E000E0004000F187E9714>I<4000E000F8007C001E000F8007C001F000
F8003E001E003E00F801F007C00F801E007C00F800E00040000F157E9514>62
D<1FC0007FF000707800201800001C00001C0007FC001FFC003C1C00701C00E01C00E01C
00E01C00707C003FFF800F8F8011107E8F14>97 D<FC0000FC00001C00001C00001C0000
1C00001C00001CF8001DFE001F07001E03001C03801C01C01C01C01C01C01C01C01C01C0
1C01C01C03801E03001F0E001DFC000CF8001217809614>I<03F80FFE1C0E3804700060
00E000E000E000E00060007000380E1C1E0FFC03F00F107E8F14>I<007E00007E00000E
00000E00000E00000E00000E0007CE000FFE001C3E00301E00700E00E00E00E00E00E00E
00E00E00E00E00E00E00700E00301E00383E001FEFC007CFC012177F9614>I<07E00FF0
1C38301C700CE00EE00EFFFEFFFEE00060007000380E1C1E0FFC03F00F107E8F14>I<00
FC01FE038E07040700070007007FFEFFFE07000700070007000700070007000700070007
0007000700FFF8FFF80F177F9614>I<07CF001FFF80383B80301800701C00701C00701C
003018003838003FF00037C0007000007000003FF8001FFC003FFE00700F00E00380E003
80E00380E003807007003C1E001FFC0007F00011197F8F14>I<FC0000FC00001C00001C
00001C00001C00001C00001C78001DFE001F86001E07001C07001C07001C07001C07001C
07001C07001C07001C07001C07001C0700FF8FE0FF8FE01317809614>I<06000F000F00
06000000000000000000FF00FF0007000700070007000700070007000700070007000700
0700FFF8FFF80D187C9714>I<FC0000FC00001C00001C00001C00001C00001C00001CFF
801CFF801C1C001C38001C70001CE0001DC0001FE0001FE0001E70001C38001C3C001C1C
001C0E00FF1F80FF1F801117809614>107 D<FF80FF8003800380038003800380038003
80038003800380038003800380038003800380038003800380FFFEFFFE0F177E9614>I<
FB8E00FFDF003CF3803CF38038E38038E38038E38038E38038E38038E38038E38038E380
38E38038E380FEFBE0FE79E01310808F14>I<FC7800FDFE001F86001E07001C07001C07
001C07001C07001C07001C07001C07001C07001C07001C0700FF8FE0FF8FE01310808F14
>I<07C01FF03C78701C701CE00EE00EE00EE00EE00EE00E701C783C3C781FF007C00F10
7E8F14>I<FE1F00FE7F800EE3800F81000F00000F00000E00000E00000E00000E00000E
00000E00000E00000E0000FFF000FFF00011107F8F14>114 D<0FD83FF86038C038C038
F0007F803FF007F8001C6006E006F006F81CFFF8CFE00F107E8F14>I<06000E000E000E
000E007FFCFFFC0E000E000E000E000E000E000E000E000E0E0E0E0E0E0E1C07F801F00F
157F9414>I<FC3F00FC3F001C07001C07001C07001C07001C07001C07001C07001C0700
1C07001C07001C07001C1F000FFFE003E7E01310808F14>I<FE3F80FE3F803C1E001C1C
001C1C001C1C000E38000E38000E380006300007700007700007700003E00003E00003E0
0011107F8F14>I<FE3F80FE3F80700700380E00380E00380E0039CE0039CE0039CE001B
6C001A6C001A6C001A6C001E7C001E7C000E380011107F8F14>I<7E3F007E3F001E3C00
0E780007700007E00003E00001C00003C00003E0000770000E78000E38001C1C00FE3F80
FE3F8011107F8F14>I E /Ff 42 122 df<00C001E001E001E001C003C003C003800380
038003000700070006000600060004000C000C0008000800000000000000000000003000
7800F00060000B1E7C9D0D>33 D<006000C000C000C03086388E1DB80F60038003800DE0
3B70E238C2180600060006000C000F12789E15>42 D<FFC0FFC0FFC00A037D890F>45
D<00000200000600000600000C00000C0000180000300000300000600000600000C00000
C0000180000180000300000600000600000C00000C000018000018000030000030000060
0000C00000C0000180000180000300000300000600000C00000C00001800001800003000
00300000600000600000C0000080000017297F9E15>47 D<0004000C00180038007807B8
007000700070007000E000E000E000E001C001C001C001C0038003800380038007000700
070007000F00FFF00E1C7B9B15>49 D<0001800001C00003800003800003800003000007
00000700000600000E00000C00001C0000180000180000300000300000600000400000C6
00018E00010E00020E00061C000C1C00181C003F1C0040F800803F800038000038000070
0000700000700000700000E00000600012247E9B15>52 D<01E006180808100C100C200C
400C401C8018E038E0F0C1E003C007800F001C0038003080308031001E00000000000000
0000000030007800F00060000E1E789D15>63 D<00001800000018000000380000003800
00007800000078000000B800000138000001380000023C0000021C0000041C00000C1C00
00081C0000101C0000101C0000201C0000201C00007FFC0000C01C0000801C0001001C00
01001E0002000E0002000E0004000E000C000E001C001E00FF00FFC01A1D7E9C1F>65
D<01FFFF00003C0380003801C0003800E0003800E0003800E0007000E0007001E0007001
E0007003C000E0038000E00F0000E01E0000FFFC0001C00E0001C0070001C0078001C007
800380078003800780038007800380078007000F0007000E0007001E0007003C000E00F0
00FFFFC0001B1C7E9B1D>I<0003F020001E0C60003002E000E003C001C001C0038001C0
070000C00E0000801E0000801C0000803C0000803C000000780000007800000078000000
F0000000F0000000F0000000F0000000F0000400F0000400F0000400F000080070000800
7000100038002000180040000C0180000706000001F800001B1E7A9C1E>I<01FFFF0000
3C03C0003800E0003800E000380070003800700070007800700038007000380070007800
E0007800E0007800E0007800E0007801C000F001C000F001C000F001C000E0038001E003
8001C0038003C0038003800700070007000E0007001C00070038000E00E000FFFF80001D
1C7E9B1F>I<01FFFFF0003C00F000380030003800200038002000380020007000200070
0020007008200070080000E0100000E0100000E0300000FFF00001C0200001C0200001C0
200001C02000038040800380008003800080038001000700010007000300070002000700
06000E003C00FFFFFC001C1C7E9B1C>I<0003F020001E0C60003002E000E003C001C001
C0038001C0070000C00E0000801E0000801C0000803C0000803C00000078000000780000
0078000000F0000000F0000000F001FF80F0001E00F0001C00F0001C00F0001C00F0001C
00700038007000380038003800180078000C0090000707100001F800001B1E7A9C20>71
D<03FF0078007000700070007000E000E000E000E001C001C001C001C003800380038003
8007000700070007000E000E000E000E001E00FFC0101C7D9B10>73
D<01FFC0003C0000380000380000380000380000700000700000700000700000E00000E0
0000E00000E00001C00001C00001C00001C0000380020380020380020380040700040700
0C0700180700380E00F0FFFFF0171C7E9B1A>76 D<0007F000001C1C0000700E0000E007
0001C0038003800380070003800E0003C01E0003C01C0003C03C0003C03C0003C0780003
C0780003C0780003C0F0000780F0000780F0000780F0000F00F0000F00F0000E00F0001E
00F0003C0070003800700070007800E0003801C0001C0380000E0E000003F800001A1E7A
9C20>79 D<01FFFE00003C0380003801C0003800E0003800E0003800E0007001E0007001
E0007001E0007001C000E003C000E0038000E0070000E01C0001FFF00001C0000001C000
0001C0000003800000038000000380000003800000070000000700000007000000070000
000F000000FFE000001B1C7E9B1C>I<01FFFE00003C0780003801C0003801E0003800E0
003800E0007001E0007001E0007001E0007003C000E0038000E0070000E01C0000FFE000
01C0300001C0180001C01C0001C01C0003801C0003801C0003801C0003801C0007003C00
07003C2007003C2007003C200F003C40FFE01E8000000F001B1D7E9B1E>82
D<000F8400304C00403C0080180100180300180300180600100600100600000700000700
0003E00003FC0001FF00007F800007C00001C00001C00000C00000C02000C02000C06001
80600180600300600200F00400CC180083E000161E7D9C17>I<1FFFFFC01C0701C0300E
00C0200E0080600E0080400E0080401C0080801C0080801C0080001C0000003800000038
000000380000003800000070000000700000007000000070000000E0000000E0000000E0
000000E0000001C0000001C0000001C0000001C0000003C000007FFE00001A1C799B1E>
I<01E307170C0F180F380E300E700E700EE01CE01CE01CE01CE039E039E0396079319A1E
0C10127C9115>97 D<3F00070007000E000E000E000E001C001C001C001C0039E03A183C
0C380C700C700E700E700EE01CE01CE01CE018E038E030E06060C031801E000F1D7C9C13
>I<00F803040E041C0E181C300070007000E000E000E000E000E000E004600860103060
0F800F127C9113>I<0007E00000E00000E00001C00001C00001C00001C0000380000380
00038000038001E7000717000C0F00180F00380E00300E00700E00700E00E01C00E01C00
E01C00E01C00E03900E03900E03900607900319A001E0C00131D7C9C15>I<00F807040C
0418023804300470087FF0E000E000E000E000E00060046008301030600F800F127C9113
>I<0003C0000670000C70001C60001C00001C0000380000380000380000380000380003
FF8000700000700000700000700000700000E00000E00000E00000E00000E00001C00001
C00001C00001C00001C000038000038000038000030000030000070000C60000E60000CC
00007800001425819C0D>I<0078C001C5C00303C00603C00E03800C03801C03801C0380
380700380700380700380700380E00380E00380E00181E000C7C00079C00001C00001C00
003800003800C03000E07000C1C0007F0000121A7E9113>I<0180038001000000000000
0000000000000000001C002600470047008E008E000E001C001C001C0038003800710071
007100720072003C00091C7C9B0D>105 D<0FC00001C00001C000038000038000038000
0380000700000700000700000700000E07800E08800E11C00E21C01C41801C80001D0000
1E00003FC00038E000387000387000707100707100707100707200E03200601C00121D7E
9C13>107 D<1F800380038007000700070007000E000E000E000E001C001C001C001C00
38003800380038007000700070007000E200E200E200E40064003800091D7D9C0B>I<1C
1E0780266318C04683A0E04703C0E08E0380E08E0380E00E0380E00E0380E01C0701C01C
0701C01C0701C01C070380380E0388380E0388380E0708380E0710701C0320300C01C01D
127C9122>I<383E004CC3004D03804E03809E03809C03801C03801C0380380700380700
380700380E00700E40700E40701C40701C80E00C8060070012127C9117>I<00F800030C
000E06001C0300180300300300700380700380E00700E00700E00700E00E00E00E00E01C
0060180060300030E0000F800011127C9115>I<03878004C86004D03004E03009C03009
C03801C03801C0380380700380700380700380600700E00700C00701800783000E86000E
78000E00000E00001C00001C00001C00001C0000380000FF0000151A809115>I<1C3C26
42468747078E068E000E000E001C001C001C001C0038003800380038007000300010127C
9112>114 D<01F006080C080C1C18181C001F001FC00FF007F0007800386030E030C030
806060C01F000E127D9111>I<03000700070007000E000E000E000E00FFE01C001C001C
0038003800380038007000700070007000E080E080E100E100660038000B1A7C990E>I<
1C01802E03804E03804E03808E07008E07001C07001C0700380E00380E00380E00380E00
301C80301C80301C80383C80184D000F860011127C9116>I<1C062E0E4E064E068E028E
021C021C023804380438043808300830083010382018400F800F127C9113>I<1E018327
03874703874703838707018707010E07010E07011C0E021C0E021C0E021C0E04180C0418
1C04181C081C1E080C263007C3C018127C911C>I<0387800CC8400870E01070E020E0C0
20E00000E00000E00001C00001C00001C00001C000038100638100E38200C58200858400
78780013127E9113>I<1C01802E03804E03804E03808E07008E07001C07001C0700380E
00380E00380E00380E00301C00301C00301C00383C001878000FB8000038000030000070
00E06000E0C0008180004300003C0000111A7C9114>I E /Fg 24
121 df<000E00001E00007E0007FE00FFFE00FFFE00F8FE0000FE0000FE0000FE0000FE
0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE
0000FE00FFFFFEFFFFFEFFFFFE17277BA622>49 D<00FF800007FFF0000FFFFC001E03FE
003800FF807C003F80FE003FC0FF001FC0FF001FE0FF000FE0FF000FE07E000FE03C001F
E000001FE000001FC000001FC000003F8000003F0000007E000000FC000000F8000001F0
000003E00000078000000F0000001E0000003C00E0007000E000E000E001C001C0038001
C0060001C00FFFFFC01FFFFFC03FFFFFC07FFFFFC0FFFFFF80FFFFFF80FFFFFF801B277D
A622>I<007F800003FFF00007FFFC000F81FE001F007F003F807F003F803F803F803F80
3F803F801F803F801F003F8000007F0000007F0000007E000000FC000001F8000007F000
00FFC00000FFC0000001F80000007E0000003F0000003F8000001FC000001FC000001FE0
00001FE03C001FE07E001FE0FF001FE0FF001FE0FF001FC0FF003FC0FE003F807C007F00
3F01FE001FFFFC0007FFF00000FF80001B277DA622>I<FFFFFFF800FFFFFFFF00FFFFFF
FFC003F8001FE003F8000FF003F80007F803F80003F803F80003FC03F80003FC03F80001
FC03F80001FC03F80001FC03F80003FC03F80003F803F80003F803F80007F003F8000FF0
03F8001FC003F800FF8003FFFFFE0003FFFFFFC003F8000FF003F80003F803F80001FC03
F80001FE03F80000FE03F80000FE03F80000FF03F80000FF03F80000FF03F80000FF03F8
0000FF03F80000FF03F80000FE03F80001FE03F80003FC03F80007FC03F8001FF8FFFFFF
FFE0FFFFFFFFC0FFFFFFFE0028297DA830>66 D<FFFFFFFC0000FFFFFFFF8000FFFFFFFF
E00003FC001FF80003FC0003FC0003FC0000FE0003FC00007F0003FC00003F8003FC0000
1FC003FC00001FC003FC00000FE003FC00000FE003FC000007F003FC000007F003FC0000
07F003FC000007F003FC000007F803FC000007F803FC000007F803FC000007F803FC0000
07F803FC000007F803FC000007F803FC000007F803FC000007F803FC000007F803FC0000
07F003FC000007F003FC000007F003FC00000FE003FC00000FE003FC00000FC003FC0000
1FC003FC00003F8003FC00007F0003FC0000FF0003FC0003FC0003FC001FF800FFFFFFFF
F000FFFFFFFF8000FFFFFFFC00002D297EA834>68 D<FFFFFFFFE0FFFFFFFFE0FFFFFFFF
E003FC001FE003FC0007F003FC0001F003FC0001F003FC0000F003FC00007003FC000070
03FC00007003FC01C07803FC01C03803FC01C03803FC01C03803FC03C00003FC03C00003
FC0FC00003FFFFC00003FFFFC00003FFFFC00003FC0FC00003FC03C00003FC03C00003FC
01C00E03FC01C00E03FC01C00E03FC01C01C03FC00001C03FC00001C03FC00001C03FC00
003C03FC00003803FC00007803FC0000F803FC0001F803FC0003F803FC001FF8FFFFFFFF
F0FFFFFFFFF0FFFFFFFFF027297EA82C>I<FFFFF0FFFFF0FFFFF003FC0003FC0003FC00
03FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC00
03FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC00
03FC0003FC0003FC0003FC0003FC0003FC0003FC0003FC00FFFFF0FFFFF0FFFFF014297E
A819>73 D<FFFFFFF800FFFFFFFF00FFFFFFFFC003FC003FE003FC0007F003FC0003F803
FC0003FC03FC0001FC03FC0001FE03FC0001FE03FC0001FE03FC0001FE03FC0001FE03FC
0001FE03FC0001FE03FC0001FC03FC0003FC03FC0003F803FC0007F003FC003FE003FFFF
FF8003FFFFFE0003FC00000003FC00000003FC00000003FC00000003FC00000003FC0000
0003FC00000003FC00000003FC00000003FC00000003FC00000003FC00000003FC000000
03FC00000003FC00000003FC000000FFFFF00000FFFFF00000FFFFF0000027297EA82E>
80 D<03FF80000FFFF0001F01FC003F80FE003F807F003F803F003F803F801F003F8000
003F8000003F8000003F8000003F80003FFF8001FC3F800FE03F801F803F803F003F807E
003F80FC003F80FC003F80FC003F80FC003F80FC005F807E00DF803F839FFC1FFE0FFC03
FC03FC1E1B7E9A21>97 D<003FF00001FFFC0003F03E000FC07F001F807F003F007F003F
007F007F003E007E0000007E000000FE000000FE000000FE000000FE000000FE000000FE
000000FE0000007E0000007E0000007F0000003F0003803F8003801F8007000FE00E0003
F83C0001FFF800003FC000191B7E9A1E>99 D<00007FF000007FF000007FF0000007F000
0007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F0000007F000
0007F0000007F0003F87F001FFF7F007F03FF00FC00FF01F8007F03F0007F03F0007F07E
0007F07E0007F07E0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE0007F0FE
0007F0FE0007F07E0007F07E0007F03F0007F03F0007F01F800FF00FC01FF007E07FFF01
FFE7FF007F87FF202A7EA925>I<003FC00001FFF00003E07C000F803E001F801F001F00
1F003F000F807E000F807E000FC07E000FC0FE0007C0FE0007C0FFFFFFC0FFFFFFC0FE00
0000FE000000FE0000007E0000007E0000007F0000003F0001C01F0001C00F80038007C0
070003F01E0000FFFC00003FE0001A1B7E9A1F>I<00FF80F003FFE3F80FC1FE1C1F007C
7C3F007E7C3E003E107E003F007E003F007E003F007E003F007E003F007E003F003E003E
003F007E001F007C000FC1F8000BFFE00018FF80001800000038000000380000003C0000
003FFFF8003FFFFF001FFFFFC00FFFFFE007FFFFF01FFFFFF03C0007F07C0001F8F80000
F8F80000F8F80000F8F80000F87C0001F07C0001F03F0007E00FC01F8007FFFF00007FF0
001E287E9A22>103 D<07000F801FC03FE03FE03FE01FC00F8007000000000000000000
000000000000FFE0FFE0FFE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE00FE0
0FE00FE00FE00FE00FE00FE00FE00FE00FE0FFFEFFFEFFFE0F2B7EAA12>105
D<FFC07F001FC000FFC1FFC07FF000FFC307E0C1F8000FC407F101FC000FC803F200FC00
0FD803FE00FE000FD003FC00FE000FD003FC00FE000FE003F800FE000FE003F800FE000F
E003F800FE000FE003F800FE000FE003F800FE000FE003F800FE000FE003F800FE000FE0
03F800FE000FE003F800FE000FE003F800FE000FE003F800FE000FE003F800FE000FE003
F800FE000FE003F800FE000FE003F800FE000FE003F800FE00FFFE3FFF8FFFE0FFFE3FFF
8FFFE0FFFE3FFF8FFFE0331B7D9A38>109 D<FFC07E00FFC1FF80FFC30FC00FC40FE00F
C807E00FD807F00FD007F00FD007F00FE007F00FE007F00FE007F00FE007F00FE007F00F
E007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00F
E007F00FE007F0FFFE3FFFFFFE3FFFFFFE3FFF201B7D9A25>I<003FE00001FFFC0003F0
7E000FC01F801F800FC03F0007E03F0007E07E0003F07E0003F07E0003F0FE0003F8FE00
03F8FE0003F8FE0003F8FE0003F8FE0003F8FE0003F8FE0003F87E0003F07E0003F03F00
07E03F0007E01F800FC00FC01F8007F07F0001FFFC00003FE0001D1B7E9A22>I<FFC1F0
FFC7FCFFC63E0FCC7F0FD87F0FD07F0FD07F0FF03E0FE0000FE0000FE0000FE0000FE000
0FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE000FFFF00
FFFF00FFFF00181B7F9A1B>114 D<03FE300FFFF03E03F07800F07000F0F00070F00070
F80070FE0000FFE0007FFF007FFFC03FFFE01FFFF007FFF800FFF80007FC0000FCE0007C
E0003CF0003CF00038F80038FC0070FF01E0E7FFC0C1FF00161B7E9A1B>I<00E00000E0
0000E00000E00001E00001E00001E00003E00003E00007E0000FE0001FFFE0FFFFE0FFFF
E00FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0000FE0
000FE0000FE0700FE0700FE0700FE0700FE0700FE0700FE07007F0E003F0C001FF80007F
0014267FA51A>I<FFE07FF0FFE07FF0FFE07FF00FE007F00FE007F00FE007F00FE007F0
0FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F00FE007F0
0FE007F00FE007F00FE007F00FE007F00FE007F00FE00FF00FE00FF007E017F003F067FF
01FFC7FF007F87FF201B7D9A25>I<FFFC03FFFFFC03FFFFFC03FF0FF000F007F000E007
F800E003F801C003F801C003FC03C001FC038001FE078000FE070000FF0700007F0E0000
7F0E00007F9E00003F9C00003FFC00001FF800001FF800000FF000000FF000000FF00000
07E0000007E0000003C0000003C000201B7F9A23>I<FFFC7FFC1FFCFFFC7FFC1FFCFFFC
7FFC1FFC0FE00FE001C007F007E0038007F007E0038007F807F0078003F807F0070003F8
0FF8070003FC0FF80F0001FC0FF80E0001FC1FFC0E0000FE1CFC1C0000FE1CFE1C0000FF
387E3C00007F387E3800007F787F3800003FF03F7000003FF03FF000003FE01FF000001F
E01FE000001FE01FE000000FC00FC000000FC00FC000000F8007C0000007800780000007
800780002E1B7F9A31>I<FFFC1FFEFFFC1FFEFFFC1FFE07F0038003F8078003FC0F0001
FE1E0000FE3C00007F3800007FF800003FF000001FE000000FE000000FF0000007F80000
0FF800001FFC00003CFE000038FF0000787F0000F03F8001E01FC003C01FE003800FE0FF
F03FFFFFF03FFFFFF03FFF201B7F9A23>I E /Fh 22 122 df<70F8FCFC740404040408
0810102040060F7C840E>44 D<008003800F80F380038003800380038003800380038003
800380038003800380038003800380038003800380038003800380038003800380038003
80038007C0FFFE0F217CA018>49 D<1000801E07001FFF001FFE001FF80017E000100000
10000010000010000010000010000011F800120C001C07001803801003800001C00001C0
0001E00001E00001E00001E07001E0F001E0F001E0E001C08001C04003C0400380200700
1006000C1C0003F00013227EA018>53 D<007E0001C1000300800601C00C03C01C03C018
0180380000380000780000700000700000F0F800F30C00F40600F40300F80380F801C0F0
01C0F001E0F001E0F001E0F001E0F001E07001E07001E07001E03801C03801C01803801C
03000C0600070C0001F00013227EA018>I<01F000060C000C0600180700380380700380
700380F001C0F001C0F001C0F001E0F001E0F001E0F001E0F001E07001E07003E03803E0
1805E00C05E00619E003E1E00001C00001C00001C0000380000380300380780700780600
700C002018001030000FC00013227EA018>57 D<FFFFF0000F801E000780070007800380
078001C0078000E0078000F007800078078000780780007C0780003C0780003C0780003C
0780003E0780003E0780003E0780003E0780003E0780003E0780003E0780003E0780003E
0780003C0780003C0780007C0780007807800078078000F0078000E0078001E0078003C0
078007000F801E00FFFFF0001F227EA125>68 D<FFFFFFC00F8007C0078001C0078000C0
078000400780004007800060078000200780002007800020078020200780200007802000
07802000078060000780E00007FFE0000780E00007806000078020000780200007802000
078020000780000007800000078000000780000007800000078000000780000007800000
078000000FC00000FFFE00001B227EA120>70 D<03FFE0001F00000F00000F00000F0000
0F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F0000
0F00000F00000F00000F00000F00000F00000F00000F00000F00700F00F80F00F80F00F8
0E00F01E00401C0020380018700007C00013237EA119>74 D<FFC00003FF0FC00003F007
C00003E005E00005E005E00005E004F00009E004F00009E004F00009E004780011E00478
0011E004780011E0043C0021E0043C0021E0043C0021E0041E0041E0041E0041E0040F00
81E0040F0081E0040F0081E004078101E004078101E004078101E00403C201E00403C201
E00401E401E00401E401E00401E401E00400F801E00400F801E00400F801E004007001E0
0E007001E01F007003F0FFE0203FFF28227EA12D>77 D<1FE000303800780C00780E0030
070000070000070000070000FF0007C7001E07003C0700780700700700F00708F00708F0
0708F00F087817083C23900FC1E015157E9418>97 D<0E0000FE00001E00000E00000E00
000E00000E00000E00000E00000E00000E00000E00000E00000E00000E1F000E61C00E80
600F00300E00380E003C0E001C0E001E0E001E0E001E0E001E0E001E0E001E0E001E0E00
1C0E003C0E00380F00700C80600C41C0083F0017237FA21B>I<01FE000703000C07801C
0780380300780000700000F00000F00000F00000F00000F00000F00000F0000070000078
00403800401C00800C010007060001F80012157E9416>I<0000E0000FE00001E00000E0
0000E00000E00000E00000E00000E00000E00000E00000E00000E00000E001F8E00704E0
0C02E01C01E03800E07800E07000E0F000E0F000E0F000E0F000E0F000E0F000E0F000E0
7000E07800E03800E01801E00C02E0070CF001F0FE17237EA21B>I<01FC000707000C03
801C01C03801C07801E07000E0F000E0FFFFE0F00000F00000F00000F00000F000007000
007800203800201C00400E008007030000FC0013157F9416>I<0E0000FE00001E00000E
00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E00000E1F800E
60C00E80E00F00700F00700E00700E00700E00700E00700E00700E00700E00700E00700E
00700E00700E00700E00700E00700E00700E0070FFE7FF18237FA21B>104
D<0E00FE001E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E
000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E00FFE00B
237FA20E>108 D<0E1F80FE60C01E80E00F00700F00700E00700E00700E00700E00700E
00700E00700E00700E00700E00700E00700E00700E00700E00700E00700E0070FFE7FF18
157F941B>110 D<01FC000707000C01801800C03800E0700070700070F00078F00078F0
0078F00078F00078F00078F000787000707800F03800E01C01C00E038007070001FC0015
157F9418>I<0E3CFE461E8F0F0F0F060F000E000E000E000E000E000E000E000E000E00
0E000E000E000E000F00FFF010157F9413>114 D<0F8830786018C018C008C008E008F0
007F003FE00FF001F8003C801C800C800CC00CC008E018D0308FC00E157E9413>I<0E00
70FE07F01E00F00E00700E00700E00700E00700E00700E00700E00700E00700E00700E00
700E00700E00700E00700E00F00E00F006017003827800FC7F18157F941B>117
D<FF80FE1E00781E00300E00200E00200700400700400780C003808003808001C10001C1
0000E20000E20000E2000074000074000038000038000038000010000010000020000020
00002000004000F04000F08000F180004300003C0000171F7F941A>121
D E /Fi 73 123 df<007E1F0001C1B1800303E3C00703C3C00E03C1800E01C0000E01C0
000E01C0000E01C0000E01C0000E01C000FFFFFC000E01C0000E01C0000E01C0000E01C0
000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0000E01C0
000E01C0000E01C0000E01C0007F87FC001A1D809C18>11 D<007E0001C1800301800703
C00E03C00E01800E00000E00000E00000E00000E0000FFFFC00E01C00E01C00E01C00E01
C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01
C07F87F8151D809C17>I<007FC001C1C00303C00703C00E01C00E01C00E01C00E01C00E
01C00E01C00E01C0FFFFC00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C00E
01C00E01C00E01C00E01C00E01C00E01C00E01C00E01C07FCFF8151D809C17>I<003F07
E00001C09C18000380F018000701F03C000E01E03C000E00E018000E00E000000E00E000
000E00E000000E00E000000E00E00000FFFFFFFC000E00E01C000E00E01C000E00E01C00
0E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E
00E01C000E00E01C000E00E01C000E00E01C000E00E01C000E00E01C007FC7FCFF80211D
809C23>I<60F0F0F0F0F0F0F060606060606060606060606060000000000060F0F06004
1E7C9D0C>33 D<6060F0F0F8F86868080808080808101010102020404080800D0C7F9C15
>I<60F0F8680808081010204080050C7C9C0C>39 D<00800100020006000C000C001800
18003000300030006000600060006000E000E000E000E000E000E000E000E000E000E000
E000E0006000600060006000300030003000180018000C000C000600020001000080092A
7C9E10>I<8000400020003000180018000C000C00060006000600030003000300030003
800380038003800380038003800380038003800380038003000300030003000600060006
000C000C00180018003000200040008000092A7E9E10>I<60F0F0701010101020204080
040C7C830C>44 D<FFE0FFE00B0280890E>I<60F0F06004047C830C>I<00010003000600
060006000C000C000C0018001800180030003000300060006000C000C000C00180018001
80030003000300060006000C000C000C00180018001800300030003000600060006000C0
00C00010297E9E15>I<010007003F00C700070007000700070007000700070007000700
07000700070007000700070007000700070007000700070007000700FFF80D1C7C9B15>
49 D<07C01830201C400C400EF00FF80FF807F8077007000F000E000E001C001C003800
70006000C00180030006010C01180110023FFE7FFEFFFE101C7E9B15>I<07E01830201C
201C781E780E781E381E001C001C00180030006007C00030001C001C000E000F000F700F
F80FF80FF80FF00E401C201C183007C0101D7E9B15>I<000C00000C00001C00003C0000
3C00005C0000DC00009C00011C00031C00021C00041C000C1C00081C00101C00301C0020
1C00401C00C01C00FFFFC0001C00001C00001C00001C00001C00001C00001C0001FFC012
1C7F9B15>I<300C3FF83FF03FC020002000200020002000200023E02C303018301C200E
000E000F000F000F600FF00FF00FF00F800E401E401C2038187007C0101D7E9B15>I<00
F0030C04040C0E181E301E300C700070006000E3E0E430E818F00CF00EE006E007E007E0
07E007E007600760077006300E300C18180C3003E0101D7E9B15>I<4000007FFF807FFF
007FFF0040020080040080040080080000100000100000200000600000400000C00000C0
0001C0000180000180000380000380000380000380000780000780000780000780000780
00078000030000111D7E9B15>I<03E00C301008200C200660066006700670067C0C3E18
3FB01FE007F007F818FC307E601E600FC007C003C003C003C00360026004300C1C1007E0
101D7E9B15>I<60F0F0600000000000000000000060F0F06004127C910C>58
D<0FE03038401CE00EF00EF00EF00E000C001C0030006000C00080018001000100010001
00010001000000000000000000000003000780078003000F1D7E9C14>63
D<000600000006000000060000000F0000000F0000000F000000178000001780000037C0
000023C0000023C0000043E0000041E0000041E0000080F0000080F0000080F000010078
000100780001FFF80002003C0002003C0002003C0004001E0004001E000C001F000C000F
001E001F00FF00FFF01C1D7F9C1F>65 D<FFFFC0000F0078000F003C000F001E000F000E
000F000F000F000F000F000F000F000F000F000E000F001E000F003C000F00F8000FFFF0
000F003C000F001E000F000F000F0007000F0007800F0007800F0007800F0007800F0007
800F000F000F000F000F001E000F007800FFFFE000191C7F9B1D>I<001F808000E06180
01801980070007800E0003801C0003801C00018038000180780000807800008070000080
F0000000F0000000F0000000F0000000F0000000F0000000F0000000F000000070000080
7800008078000080380000801C0001001C0001000E000200070004000180080000E03000
001FC000191E7E9C1E>I<FFFFC0000F00F0000F003C000F000E000F0007000F0007000F
0003800F0003C00F0001C00F0001C00F0001E00F0001E00F0001E00F0001E00F0001E00F
0001E00F0001E00F0001E00F0001C00F0001C00F0003C00F0003800F0007800F0007000F
000E000F001C000F007000FFFFC0001B1C7E9B20>I<FFFFFC0F003C0F000C0F00040F00
040F00060F00020F00020F01020F01000F01000F01000F03000FFF000F03000F01000F01
000F01000F01010F00010F00020F00020F00020F00060F00060F000C0F003CFFFFFC181C
7E9B1C>I<FFFFF80F00780F00180F00080F00080F000C0F00040F00040F01040F01000F
01000F01000F03000FFF000F03000F01000F01000F01000F01000F00000F00000F00000F
00000F00000F00000F00000F0000FFF800161C7E9B1B>I<FFF0FFF00F000F000F000F00
0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00
0F000F000FFFFF000F000F000F000F000F000F000F000F000F000F000F000F000F000F00
0F000F000F000F000F000F000F000F000F000F000F000F00FFF0FFF01C1C7F9B1F>72
D<FFF00F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F
000F000F000F000F000F000F000F000F000F00FFF00C1C7F9B0F>I<FFF8000F80000F00
000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00000F00
000F00000F00000F00000F00080F00080F00080F00180F00180F00100F00300F00700F01
F0FFFFF0151C7E9B1A>76 D<FF001FF00F8003800FC001000BC0010009E0010008F00100
08F0010008780100083C0100083E0100081E0100080F0100080F8100080781000803C100
0801E1000801F1000800F1000800790008007D0008003D0008001F0008001F0008000F00
08000700080003001C000300FF8001001C1C7F9B1F>78 D<003F800000E0E00003803800
07001C000E000E001C0007003C00078038000380780003C0780003C0700001C0F00001E0
F00001E0F00001E0F00001E0F00001E0F00001E0F00001E0F00001E0700001C0780003C0
780003C0380003803C0007801C0007000E000E0007001C000380380000E0E000003F8000
1B1E7E9C20>I<FFFF800F00E00F00780F003C0F001C0F001E0F001E0F001E0F001E0F00
1E0F001C0F003C0F00780F00E00FFF800F00000F00000F00000F00000F00000F00000F00
000F00000F00000F00000F00000F0000FFF000171C7E9B1C>I<FFFF00000F01E0000F00
78000F003C000F001C000F001E000F001E000F001E000F001E000F001C000F003C000F00
78000F01E0000FFF00000F01E0000F0070000F0078000F003C000F003C000F003C000F00
3C000F003C000F003C000F003C100F003C100F001C100F001C10FFF00E20000003C01C1D
7E9B1F>82 D<07E0801C1980300580300380600180E00180E00080E00080E00080F00000
F800007C00007FC0003FF8001FFE0007FF0000FF80000F800007C00003C00001C08001C0
8001C08001C0C00180C00180E00300D00200CC0C0083F800121E7E9C17>I<7FFFFFC070
0F01C0600F00C0400F0040400F0040C00F0020800F0020800F0020800F0020000F000000
0F0000000F0000000F0000000F0000000F0000000F0000000F0000000F0000000F000000
0F0000000F0000000F0000000F0000000F0000000F0000000F0000001F800003FFFC001B
1C7F9B1E>I<FFF01FF00F0003800F0001000F0001000F0001000F0001000F0001000F00
01000F0001000F0001000F0001000F0001000F0001000F0001000F0001000F0001000F00
01000F0001000F0001000F0001000F0001000F00010007000200078002000380040001C0
040000E0180000706000000F80001C1D7F9B1F>I<FFE00FF01F0003C01F0001800F0001
000F000100078002000780020007C0020003C0040003C0040003E00C0001E0080001E008
0000F0100000F0100000F810000078200000782000003C4000003C4000003C4000001E80
00001E8000001F8000000F0000000F00000006000000060000000600001C1D7F9B1F>I<
FFE1FFC0FF1F003E003C1E003C00180F001E00100F001E00100F001E001007801F002007
801F002007801F002003C027804003C027804003C027804001E043C08001E043C08001E0
43C08000F081E10000F081E10000F081E10000F900F300007900F200007900F200007E00
7E00003E007C00003E007C00003C003C00001C003800001C003800001800180000080010
00281D7F9B2B>I<FFF07FC00FC01E0007800C0007C0080003C0100001E0200001F02000
00F0400000788000007C8000003D0000003E0000001F0000000F0000000F8000000F8000
0013C0000023E0000021E0000040F0000080F8000080780001007C0002003E0002001E00
06001F001F001F80FF807FF01C1C7F9B1F>I<FFF003FC0F8001E0078000C007C0008003
C0010003E0030001E0020000F0040000F8040000780800007C1800003C1000003E200000
1F2000000F4000000FC00000078000000780000007800000078000000780000007800000
07800000078000000780000007800000078000007FF8001E1C809B1F>I<FEFEC0C0C0C0
C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0FEFE07
297C9E0C>91 D<08081010202040404040808080808080B0B0F8F8787830300D0C7A9C15
>I<FEFE0606060606060606060606060606060606060606060606060606060606060606
0606060606FEFE0729809E0C>I<0810204040808080B0F87830050C7D9C0C>96
D<1FC000307000783800781C00301C00001C00001C0001FC000F1C00381C00701C00601C
00E01C40E01C40E01C40603C40304E801F870012127E9115>I<FC00001C00001C00001C
00001C00001C00001C00001C00001C00001C00001C00001C7C001D87001E01801C00C01C
00E01C00601C00701C00701C00701C00701C00701C00701C00601C00E01C00C01E018019
070010FC00141D7F9C17>I<03F80C0C181E301E700C6000E000E000E000E000E000E000
60007002300218040C1803E00F127F9112>I<001F800003800003800003800003800003
8000038000038000038000038000038003F3800E0B80180780300380700380600380E003
80E00380E00380E00380E00380E003806003807003803003801807800E1B8003E3F0141D
7F9C17>I<07E00C301818300C700E6006E006FFFEE000E000E000E00060007002300218
040C1803E00F127F9112>I<00F8018C071E061E0E0C0E000E000E000E000E000E00FFE0
0E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E007FE00F1D
809C0D>I<00038007C4C01C78C0383880301800701C00701C00701C00701C0030180038
38001C700027C0002000002000003000003FF8001FFF001FFF802003806001C0C000C0C0
00C0C000C06001803003001C0E0007F800121C7F9215>I<FC00001C00001C00001C0000
1C00001C00001C00001C00001C00001C00001C00001C7C001C87001D03001E03801C0380
1C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C03801C0380
FF9FF0141D7F9C17>I<18003C003C0018000000000000000000000000000000FC001C00
1C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00FF80091D7F9C
0C>I<00C001E001E000C0000000000000000000000000000007E000E000E000E000E000
E000E000E000E000E000E000E000E000E000E000E000E000E000E000E000E060E0F0C0F1
C061803E000B25839C0D>I<FC00001C00001C00001C00001C00001C00001C00001C0000
1C00001C00001C00001C0FE01C07801C06001C0C001C10001C20001C40001CE0001DE000
1E70001C78001C38001C3C001C1C001C0E001C0F001C0F80FF9FE0131D7F9C16>I<FC00
1C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C001C00
1C001C001C001C001C001C001C001C001C00FF80091D7F9C0C>I<FC7E07E0001C838838
001D019018001E01E01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C00
1C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C01C01C001C
01C01C00FF8FF8FF8021127F9124>I<FC7C001C87001D03001E03801C03801C03801C03
801C03801C03801C03801C03801C03801C03801C03801C03801C03801C0380FF9FF01412
7F9117>I<03F0000E1C00180600300300700380600180E001C0E001C0E001C0E001C0E0
01C0E001C06001807003803003001806000E1C0003F00012127F9115>I<FC7C001D8700
1E01801C01C01C00E01C00E01C00701C00701C00701C00701C00701C00701C00E01C00E0
1C01C01E01801D07001CFC001C00001C00001C00001C00001C00001C00001C0000FF8000
141A7F9117>I<03E0800E1980180580380780700380700380E00380E00380E00380E003
80E00380E003807003807003803807801807800E1B8003E3800003800003800003800003
80000380000380000380001FF0141A7F9116>I<FCE01D381E781E781C301C001C001C00
1C001C001C001C001C001C001C001C001C00FFC00D127F9110>I<1F9020704030C010C0
10E010F8007F803FE00FF000F880388018C018C018E010D0608FC00D127F9110>I<0400
0400040004000C000C001C003C00FFE01C001C001C001C001C001C001C001C001C001C10
1C101C101C101C100C100E2003C00C1A7F9910>I<FC1F801C03801C03801C03801C0380
1C03801C03801C03801C03801C03801C03801C03801C03801C03801C07800C07800E1B80
03E3F014127F9117>I<FF07E03C03801C01001C01000E02000E02000F06000704000704
0003880003880003C80001D00001D00000E00000E00000E00000400013127F9116>I<FF
3FC7E03C0703C01C0701801C0701001C0B01000E0B82000E0B82000E1182000711C40007
11C4000720C40003A0E80003A0E80003C0680001C0700001C0700001803000008020001B
127F911E>I<FF0FE01E07001C06000E040007080003900003B00001E00000E00000F000
01F000013800021C00041C000C0E001807003C0780FE1FF014127F9116>I<FF07E03C03
801C01001C01000E02000E02000F060007040007040003880003880003C80001D00001D0
0000E00000E00000E000004000004000008000008000F08000F10000F300006600003800
00131A7F9116>I<7FFC70386038407040F040E041C003C0038007000F040E041C043C0C
380870087038FFF80E127F9112>I E /Fj 9 120 df<78FCFCFCFC7806067A8512>46
D<00080000380000780001F8003FF800FE7800C078000078000078000078000078000078
000078000078000078000078000078000078000078000078000078000078000078000078
000078000078000078000078000078000078000078000078000078000078000078000078
0000780000780000780000780000780000780000780000780000FC007FFFF87FFFF8152F
7AAE21>49 D<FFFFFFE00000FFFFFFFC000007E0007F000003E0000F800003E00003C000
03E00001E00003E00000F00003E00000780003E000003C0003E000001E0003E000001E00
03E000000F0003E000000F0003E000000F8003E00000078003E0000007C003E0000007C0
03E0000003C003E0000003C003E0000003E003E0000003E003E0000003E003E0000003E0
03E0000003E003E0000003E003E0000003E003E0000003E003E0000003E003E0000003E0
03E0000003E003E0000003C003E0000003C003E0000007C003E0000007C003E000000780
03E00000078003E000000F8003E000000F0003E000001F0003E000001E0003E000003C00
03E00000780003E00000F80003E00001F00003E00003E00003E0000F800007E0003F0000
FFFFFFFC0000FFFFFFE000002B317CB033>68 D<FFFFFFFFF0FFFFFFFFF007E00007F003
E00000F003E000007803E000003803E000001803E000001803E000000803E000000803E0
00000803E000000803E000000403E000000403E000000403E000400403E000400003E000
400003E000400003E000400003E000C00003E000C00003E003C00003FFFFC00003FFFFC0
0003E003C00003E000C00003E000C00003E000400003E000400003E000400003E0004001
03E000400103E000000103E000000203E000000203E000000203E000000203E000000603
E000000603E000000403E000000C03E000000C03E000001C03E000003C03E00000FC07E0
0007F8FFFFFFFFF8FFFFFFFFF828317DB02D>I<00FE00000303C0000C00E00010007000
100038003C003C003E001C003E001E003E001E0008001E0000001E0000001E0000001E00
000FFE0000FC1E0003E01E000F801E001F001E003E001E003C001E007C001E00F8001E04
F8001E04F8001E04F8003E04F8003E0478003E047C005E043E008F080F0307F003FC03E0
1E1F7D9E21>97 D<0780FE0000FF83078000FF8C03C0000F9001E00007A001E00007A000
F00007C000F00007C000F000078000F000078000F000078000F000078000F000078000F0
00078000F000078000F000078000F000078000F000078000F000078000F000078000F000
078000F000078000F000078000F000078000F000078000F000078000F000078000F00007
8000F0000FC001F800FFFC1FFF80FFFC1FFF80211F7E9E25>110
D<0783E0FF8418FF887C0F907C07A07C07A03807C00007C00007C0000780000780000780
000780000780000780000780000780000780000780000780000780000780000780000780
000780000780000780000780000FC000FFFE00FFFE00161F7E9E19>114
D<FFF800FF80FFF800FF800FC0007C000780003800078000300003C000200003C0002000
01E000400001E000400001F000400000F000800000F00080000078010000007801000000
7C010000003C020000003C020000001E040000001E040000001F040000000F080000000F
080000000790000000079000000007D000000003E000000003E000000001C000000001C0
00000001C000000000800000211F7F9E23>118 D<FFF03FF80FFCFFF03FF80FFC0F8007
E003F00F8003C001C0078003C00080078003C0008007C003E0018003C003E0010003C004
E0010003E004F0030001E004F0020001E00870020001F00878060000F00878040000F010
3804000078103C08000078103C08000078201C0800003C201E1000003C201E1000003C40
0E1000001E400F2000001E400F2000001E80072000000F8007C000000F8007C000000F00
03C0000007000380000007000380000006000180000002000100002E1F7F9E30>I
E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 788 266 a Fj(En)n(vDra)n(w)21 b(1.1)607 315 y
Fi(An)14 b(en)o(vironmen)o(t)f(diagramm)o(er)f(for)h(Sc)o(heme)797
472 y Fh(Josh)k(MacDonald)795 605 y(F)l(ebruary)f(5,)g(1996)0
820 y Fg(1)67 b(In)n(tro)r(duction)0 946 y Fi(En)o(vDra)o(w)14
b(is)h(a)g(en)o(vironmen)o(t)f(diagramm)o(ing)d(pac)o(k)n(age)k(whic)o
(h)g(dra)o(ws)g(en)o(vironmen)o(t)e(diagrams)g(as)i(taugh)o(t)g(in)f
(Ab)q(elson)0 996 y(and)19 b(Sussman's)f Ff(Structur)n(e)h(and)i
(Interpr)n(etation)e(of)g(Computer)h(L)n(anguages)p Fi(.)35
b(It)19 b(w)o(as)g(written)g(as)g(an)g(instructional)0
1046 y(to)q(ol)d(for)h(the)g(CS61A)f(course)i(at)f(the)g(Univ)o(ersit)o
(y)g(of)f(California)f(at)i(Berk)o(eley)m(.)27 b(The)17
b(en)o(vironmen)o(t)f(diagramm)o(er)f(is)h(a)0 1096 y(metacircular)c
(ev)n(aluator)h(whic)o(h)g(dra)o(ws)h(pro)q(cedures,)h(en)o(vironmen)o
(ts,)d(and)h(b)q(o)o(x)g(and)g(p)q(oin)o(ter)h(diagrams)d(along)h(with)
h(all)0 1145 y(the)h(accompan)o(ying)e(sym)o(b)q(ols)g(and)h(m)o
(utation.)j(It)e(includes)g(a)f(b)q(o)o(x)h(and)f(p)q(oin)o(ter)h
(diagramm)o(er)d(whic)o(h)j(handles)g(circular)0 1195
y(list)e(structures,)j(cons)f(cell)e(m)o(utation,)f(and)h(also)g(will)g
(w)o(atc)o(h)g(for)h(mo)q(di\014cation)d(of)i(an)o(y)h(sym)o(b)q(ols)e
(kno)o(wn)h(to)h(b)q(e)g(p)q(oin)o(ting)0 1245 y(to)h(dra)o(wn)g
(cells.)0 1418 y Fg(2)67 b(Bo)n(x)22 b(and)h(P)n(oin)n(ter)h(Diagrams)0
1545 y Fi(There)15 b(are)f(t)o(w)o(o)f(separate)i(applications)d
(included)i(with)f(En)o(vDra)o(w.)18 b(The)c(\014rstis)g(a)f(b)q(o)o(x)
h(and)f(p)q(oin)o(ter)h(diagramm)o(er.)i(T)m(o)0 1595
y(use)f(the)f(b)q(o)o(x)g(and)f(p)q(oin)o(ter)i(diagramm)o(er,)c(just)j
(t)o(yp)q(e)g(\(view)g Ff(data)t Fi(\).)78 1718 y Fe(\(define)j(l)j
(\(list)d(1)j(2)f(3\)\))78 1763 y(\(view)f(l\))965 2799
y Fi(1)p eop
%%Page: 2 2
2 1 bop 302 50 a
 21247508 13551043 9538355 19274055 30785863 32825098 startTexFig
 302 50 a
%%BeginDocument: figs/diag1.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
316 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
316 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
286 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
286 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
406 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
406 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
376 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
376 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
496 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
496 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
466 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
466 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
301 165.5 [
    (1)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
391 165.5 [
    (2)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
481 165.5 [
    (3)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
496 200 moveto
526 230 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
481 215 moveto
481 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
481 165.5 moveto
485 175.5 lineto
482 174 lineto
480 174 lineto
477 175.5 lineto
481 165.5 lineto
fill
grestore
gsave
391 215 moveto
391 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
391 165.5 moveto
395 175.5 lineto
392 174 lineto
390 174 lineto
387 175.5 lineto
391 165.5 lineto
fill
grestore
gsave
421 215 moveto
460.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
466 215 moveto
456 219 lineto
457.5 216 lineto
457.5 214 lineto
456 211 lineto
466 215 lineto
fill
grestore
gsave
301 215 moveto
301 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
301 165.5 moveto
305 175.5 lineto
302 174 lineto
300 174 lineto
297 175.5 lineto
301 165.5 lineto
fill
grestore
gsave
331 215 moveto
370.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
376 215 moveto
366 219 lineto
367.5 216 lineto
367.5 214 lineto
366 211 lineto
376 215 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220.5 226 [
    (l)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
280.5 218 moveto
226 218 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
286 218 moveto
276 222 lineto
277.5 219 lineto
277.5 217 lineto
276 214 lineto
286 218 lineto
fill
grestore
restore showpage

end
%%EndDocument

 endTexFig
 676 999 a Fi(Figure)14 b(1:)k(View)c(of)f(the)i(list)e(\(1)h(2)g(3\))0
1127 y(A)j(top-lev)o(el)e(windo)o(w)h(will)f(b)q(e)i(created)h(con)o
(taining)d(a)h(diagram)e(of)i(the)h(sym)o(b)q(ol)e(`l')g(p)q(oin)o
(ting)g(to)h(the)h(diagram)e(of)g(the)0 1176 y(list.)31
b(The)19 b(windo)o(w)f(con)o(taining)f(the)i(diagram)e(has)h(a)g(lab)q
(el)g(and)h(three)g(buttons)g(on)g(the)g(top.)31 b(En)o(tering)19
b(an)o(y)f(item)0 1226 y(with)c(the)g(mouse)f(will)g(prin)o(t)g(the)i
(prin)o(ted)f(represen)o(tation)h(of)f(that)g(cell)f(in)h(the)g(lab)q
(el.)k(The)c(three)h(buttons)g(are)f(lab)q(eled)0 1276
y Ff(dismiss)s Fi(,)j Ff(fo)n(cus)s Fi(,)g(and)g Ff(c)n(olors)s
Fi(.)26 b(The)18 b Ff(dismiss)h Fi(button)e(destro)o(ys)h(the)f(windo)o
(w.)26 b(The)17 b Ff(fo)n(cus)k Fi(button)c(is)f(a)h(c)o(hec)o(kbutton)
0 1326 y(whic)o(h)d(indicates)h(that)g(a)f(particular)g(windo)o(w)g(is)
g(the)h(curren)o(t)h(windo)o(w)e(in)o(to)g(whic)o(h)g(new)h(diagrams)d
(will)h(b)q(e)j(dra)o(wn.)j(If)0 1376 y(a)14 b(particular)g(windo)o(w)f
(is)i(the)g(curren)o(t)g(windo)o(w,)e(pressing)i(the)g
Ff(fo)n(cus)j Fi(button)d(will)d(unfo)q(cus)j(it,)f(so)g(that)h(the)f
(next)h(time)0 1425 y(view)c(is)h(called)f(a)g(new)h(windo)o(w)f(will)f
(b)q(e)i(created.)19 b(Otherwise,)13 b(pressing)f(the)g
Ff(fo)n(cus)j Fi(button)d(will)e(mak)o(e)g(that)i(windo)o(w)e(the)0
1475 y(curren)o(t)16 b(windo)o(w.)i(Y)m(ou)13 b(can)i(mak)o(e)e(ev)o
(ery)i(call)e(to)h Ff(view)k Fi(create)e(its)e(o)o(wn)g(windo)o(w)f(b)o
(y)h(setting)h(the)f(v)n(alue)g Ff(*view-r)n(o)n(ot)j
Fi(to)0 1525 y Fd(#f)p Fi(.)g(The)12 b Ff(c)n(olors)j
Fi(button)d(op)q(ens)h(a)f(men)o(u)f(whic)o(h)h(allo)o(ws)e(selection)j
(of)f(a)f(color)h(whic)o(h)g(determines)g(the)h(color)e(of)h(an)o
(ything)0 1575 y(new)i(dra)o(wn)g(in)g(that)g(windo)o(w.)j(Once)e(a)e
(particular)h(cell)g(is)g(dra)o(wn,)f(an)o(y)g(m)o(utation)f(of)h(that)
h(cell)g(will)e(b)q(e)j(recorded.)0 1660 y(F)m(or)e(example,)g(con)o
(tin)o(uing)g(with)g(the)i(ab)q(o)o(v)o(e)e(example,)f(if)h(y)o(ou)h
(no)o(w)f(t)o(yp)q(e:)78 1783 y Fe(\(set-car!)k(l)i(4\))965
2799 y Fi(2)p eop
%%Page: 3 3
3 2 bop 302 50 a
 21247508 13551043 9538355 19274055 30785863 32825098 startTexFig
 302 50 a
%%BeginDocument: figs/diag2.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
316 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
316 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
286 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
286 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
406 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
406 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
376 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
376 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
496 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
496 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
466 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
466 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
301 155.5 [
    (1)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
391 155.5 [
    (2)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
481 155.5 [
    (3)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
496 190 moveto
526 220 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
481 205 moveto
481 161 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
481 155.5 moveto
485 165.5 lineto
482 164 lineto
480 164 lineto
477 165.5 lineto
481 155.5 lineto
fill
grestore
gsave
391 205 moveto
391 161 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
391 155.5 moveto
395 165.5 lineto
392 164 lineto
390 164 lineto
387 165.5 lineto
391 155.5 lineto
fill
grestore
gsave
421 205 moveto
460.5 205 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
466 205 moveto
456 209 lineto
457.5 206 lineto
457.5 204 lineto
456 201 lineto
466 205 lineto
fill
grestore
gsave
301 205 moveto
301 160.357142857143 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.506 0.506 0.506 setrgbcolor AdjustColor
stroke
301 155.5 moveto
304.5 165.5 lineto
301.5 163.785714285714 lineto
300.5 163.785714285714 lineto
297.5 165.5 lineto
301 155.5 lineto
fill
grestore
gsave
331 205 moveto
370.5 205 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
376 205 moveto
366 209 lineto
367.5 206 lineto
367.5 204 lineto
366 201 lineto
376 205 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220.5 216 [
    (l)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
280.5 208 moveto
226 208 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
286 208 moveto
276 212 lineto
277.5 209 lineto
277.5 207 lineto
276 204 lineto
286 208 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
266 103 [
    (4)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
301 205 moveto
267.785087663234 108.202255475711 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
266 103 moveto
273.029072460943 111.160400746214 lineto
269.704636475128 110.715287978239 lineto
267.812907211233 111.364410764869 lineto
265.462155405363 113.756891892737 lineto
266 103 lineto
fill
grestore
restore showpage

end
%%EndDocument

 endTexFig
 602 999 a Fi(Figure)14 b(2:)k(View)c(of)f(the)i(list)e(after)h(a)g
Ff(set-c)n(ar!)0 1127 y Fi(The)g(cell)f(whic)o(h)g Ff(l)k
Fi(p)q(oin)o(ts)c(to)g(no)o(w)g(has)g(a)g(p)q(oin)o(ter)g(to)g(a)g
Ff(4)19 b Fi(instead)14 b(of)e(the)i Ff(1)19 b Fi(whic)o(h)13
b(it)g(previously)g(p)q(oin)o(ted)g(to.)18 b(The)c(old)0
1176 y(p)q(oin)o(ter)f(has)g(thinned)h(and)e(dark)o(ened,)i(but)f
(remains)f(on)h(the)g(diagram.)j(Y)m(ou)c(can)h(remo)o(v)o(e)g(the)g
Ff(1)19 b Fi(and)13 b(the)g(p)q(oin)o(ter)g(to)g(it)0
1226 y(b)o(y)h(clic)o(king)f(Button-3)h(on)f(the)i Ff(1)k
Fi(or)14 b(the)h(p)q(oin)o(ter)f(to)g(it.)0 1312 y(When)i(the)g(m)o
(utation)d(o)q(ccured)k(new)f(data)f(had)h(to)f(b)q(e)h(put)g(on)f(the)
h(diagram.)21 b(Since)16 b(it)f(w)o(ould)g(b)q(e)h(di\016cult)f(to)g
(pic)o(k)g(a)0 1362 y(really)g(go)q(o)q(d)g(place)h(to)f(diagram)e(new)
j(ob)r(jects)h(and)e(cells,)h(an)o(ything)e(on)i(the)g(diagram)d(is)i
(mo)o(v)n(able.)21 b(It)15 b(will,)f(ho)o(w)o(ev)o(er,)0
1411 y(try)g(to)g(\014nd)g(a)f(go)q(o)q(d)h(place)g(to)g(put)g(the)g
(new)h(data.)0 1497 y(T)m(o)f(mo)o(v)o(e)f(an)i(item,)e(clic)o(k)h
(Button-1)h(o)o(v)o(er)g(that)g(item)e(and)i(drag)f(it.)20
b(This)15 b(will)e(mo)o(v)o(e)g(the)j(item)d(and)i(an)o(y)f(descendan)o
(ts)0 1547 y(of)g(it.)21 b(This)15 b(will)f(let)h(y)o(ou)f(arrange)i
(the)f(diagram)e(to)i(exploit)f(an)o(y)h(symmetries)e(or)i(organize)g
(the)h(diagram.)j(Button-)c(2)0 1597 y(will)d(mo)o(v)o(e)h(just)h(one)g
(item)e(and)i(not)g(its)g(descendan)o(ts.)0 1682 y(The)g(diagrammer)d
(will)i(w)o(ork)h(for)f(arbitrarily)g(circular)i(and)f(complicated)e
(list)i(structures.)21 b(Y)m(ou)13 b(can)i(also)e(m)o(utate)g(cell)0
1732 y(p)q(oin)o(ters)h(to)g(data)g(whic)o(h)g(is)f(already)h(diagramm)
o(ed.)i(F)m(or)d(example,)f(no)o(w)i(try:)78 1855 y Fe(\(set-cdr!)j
(\(cddr)g(l\))i(l\))78 1900 y(\(set-cdr!)e(l)i(\(cddr)f(l\)\))965
2799 y Fi(3)p eop
%%Page: 4 4
4 3 bop 302 50 a
 21247508 13551043 9538355 19274055 30785863 32825098 startTexFig
 302 50 a
%%BeginDocument: figs/diag3.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
316 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
316 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
286 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
286 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
413 173 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.702 0.702 0.702 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
413 173 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
383 173 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.702 0.702 0.702 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
383 173 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
504 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
474 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
474 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
301 155.5 [
    (1)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
398 108.5 [
    (2)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
489 153.5 [
    (3)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
489 203 moveto
489 159 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
489 153.5 moveto
493 163.5 lineto
490 162 lineto
488 162 lineto
485 163.5 lineto
489 153.5 lineto
fill
grestore
gsave
398 158 moveto
398 113.357142857143 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.506 0.506 0.506 setrgbcolor AdjustColor
stroke
398 108.5 moveto
401.5 118.5 lineto
398.5 116.785714285714 lineto
397.5 116.785714285714 lineto
394.5 118.5 lineto
398 108.5 lineto
fill
grestore
gsave
428 158 moveto
499.482103210676 186.216619688425 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.506 0.506 0.506 setrgbcolor AdjustColor
stroke
504 188 moveto
493.413364915111 187.583877927299 lineto
496.109416327315 185.422840608567 lineto
496.476582862051 184.492685387236 lineto
495.983530658263 181.07279137798 lineto
504 188 lineto
fill
grestore
gsave
301 205 moveto
301 160.357142857143 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.506 0.506 0.506 setrgbcolor AdjustColor
stroke
301 155.5 moveto
304.5 165.5 lineto
301.5 163.785714285714 lineto
300.5 163.785714285714 lineto
297.5 165.5 lineto
301 155.5 lineto
fill
grestore
gsave
331 205 moveto
408.475194419644 174.765777787456 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.506 0.506 0.506 setrgbcolor AdjustColor
stroke
413 173 moveto
404.956622504934 179.895946524725 lineto
405.462985252807 176.477997976579 lineto
405.099442767155 175.546420357094 lineto
402.411825105365 173.374903188329 lineto
413 173 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220.5 216 [
    (l)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
280.5 208 moveto
226 208 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
286 208 moveto
276 212 lineto
277.5 209 lineto
277.5 207 lineto
276 204 lineto
286 208 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
266 103 [
    (4)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
301 205 moveto
267.785087663234 108.202255475711 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
266 103 moveto
273.029072460943 111.160400746214 lineto
269.704636475128 110.715287978239 lineto
267.812907211233 111.364410764869 lineto
265.462155405363 113.756891892737 lineto
266 103 lineto
fill
grestore
gsave
519 203 moveto
519 236 lineto
319 236 lineto
319 225.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
319 220 moveto
323 230 lineto
320 228.5 lineto
318 228.5 lineto
315 230 lineto
319 220 lineto
fill
grestore
gsave
331 205 moveto
468.5 205 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
474 205 moveto
464 209 lineto
465.5 206 lineto
465.5 204 lineto
464 201 lineto
474 205 lineto
fill
grestore
restore showpage

end
%%EndDocument

 endTexFig
 554 999 a Fi(Figure)14 b(3:)k(View)c(of)f(the)i(list)e(after)h(more)f
(m)o(utation)0 1108 y(No)o(w)i(the)g(tail)f(of)h(the)g(list)g(p)q(oin)o
(ts)g(to)f(itself)h(and)g(one)g(of)f(the)i(cells)f(has)g(b)q(een)i
(spliced)e(out.)21 b(In)15 b(the)h(lab)q(el)e(at)h(the)h(top)f(of)0
1158 y(the)f(windo)o(w,)f(a)h(\(4)f(3)h(...\))j(will)c(b)q(e)h(displa)o
(y)o(ed)f(if)g(the)i(fron)o(t)e(of)h(the)g(list)g(is)f(en)o(tered.)302
1267 y
 21247508 13551043 9538355 19274055 30785863 32825098 startTexFig
 302 1267 a
%%BeginDocument: figs/diag4.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
316 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
316 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
286 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
286 220 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
504 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
504 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
474 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
474 218 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
489 153.5 [
    (3)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
489 203 moveto
489 159 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
489 153.5 moveto
493 163.5 lineto
490 162 lineto
488 162 lineto
485 163.5 lineto
489 153.5 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220.5 216 [
    (l)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
280.5 208 moveto
226 208 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
286 208 moveto
276 212 lineto
277.5 209 lineto
277.5 207 lineto
276 204 lineto
286 208 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
302 144 [
    (4)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
301 205 moveto
301.909848178684 149.499261100285 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
302 144 moveto
305.835550215996 154.064221506931 lineto
302.860540112563 152.515249304317 lineto
300.860808803369 152.482466823838 lineto
297.836624979218 153.933091585016 lineto
302 144 lineto
fill
grestore
gsave
519 203 moveto
519 236 lineto
319 236 lineto
319 225.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
319 220 moveto
323 230 lineto
320 228.5 lineto
318 228.5 lineto
315 230 lineto
319 220 lineto
fill
grestore
gsave
331 205 moveto
468.5 205 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
474 205 moveto
464 209 lineto
465.5 206 lineto
465.5 204 lineto
464 201 lineto
474 205 lineto
fill
grestore
restore showpage

end
%%EndDocument

 endTexFig
 528 2217 a Fi(Figure)h(4:)k(View)c(of)f(the)i(list)e(after)h(remo)o
(ving)e(garbage)0 2326 y(The)i(algorithm)d(that)j(initially)d(places)k
(the)f(cells)g(can)g(either)h(pro)q(duce)g(tree)g(structured)h(data)d
(structures)k(or)d(list)f(struc-)0 2376 y(tures.)20 b(Eac)o(h)15
b(cell)f(ma)o(y)e(b)q(e)j(dra)o(wn)f(with)g(its)g(p)q(oin)o(ters)h(p)q
(oin)o(ting)e(do)o(wn)h(and)g(to)g(the)h(left)f(and)g(righ)o(t)g(as)g
(if)g(it)g(w)o(ere)h(a)f(tree)0 2426 y(no)q(de)g(or)g(with)g(its)g(car)
h(p)q(oin)o(ter)f(going)f(straigh)o(t)h(do)o(wn)f(and)h(its)g(cdr)h(p)q
(oin)o(ter)f(going)f(to)h(the)g(righ)o(t.)k(The)d(metho)q(d)e(that)h
(is)0 2476 y(c)o(hosen)h(is)f(based)g(on)g(the)g(return)h(v)n(alue)e
(of)h(a)f(predicate,)i(whic)o(h)e(is)h(called)g(with)f(the)i(cell)e(in)
h(question)g(as)g(an)g(argumen)o(t.)0 2525 y(This)e(predicate)h(m)o
(ust)d(return)j(true)g(if)e(the)h(cell)g(is)g(to)f(b)q(e)i(dra)o(wn)e
(as)h(a)g(tree)h(and)f(false)f(if)g(the)h(cell)g(is)g(to)f(b)q(e)i(dra)
o(wn)f(as)f(a)h(list.)0 2575 y(This)i(predicate)g(defaults)g(to)f
(\(lam)o(b)q(da)f(\(x\))i(\(not)f(\(list?)18 b(x\)\)\),)13
b(so)h(that)g(an)o(ything)e(that)i(is)g(a)f(true)h(list)f(will)g(b)q(e)
h(dra)o(wn)f(so.)0 2625 y(Y)m(ou)g(can)h(tell)f(it)g(to)h(use)g(a)g
(di\013eren)o(t)g(predicate)h(b)o(y)e(sp)q(ecifying)h(it)f(as)h(an)f
(additional)f(argumen)o(t)g(to)i(view.)k(F)m(or)13 b(example,)0
2675 y(y)o(ou)g(can)i(dra)o(w)e(a)h(w)o(eird)g(lo)q(oking)e(structure)k
(with)965 2799 y(4)p eop
%%Page: 5 5
5 4 bop 78 91 a Fe(\(define)17 b(s)j(\(list)d(#f)i(#t)g(#f\)\))78
137 y(\(view)f(s)h(\(lambda)e(\(x\))i(\(car)f(x\)\)\))302
369 y
 21247508 13551043 9538355 19274055 30785863 32825098 startTexFig
 302 369 a
%%BeginDocument: figs/diag5.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
316 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
316 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
286 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
286 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
481 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
481 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
451 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
451 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
541 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
541 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
511 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
511 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
301 165.5 [
    (#f)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
421 170 [
    (#t)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
526 105.5 [
    (#f)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
541 140 moveto
571 170 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
526 155 moveto
526 111 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
526 105.5 moveto
530 115.5 lineto
527 114 lineto
525 114 lineto
522 115.5 lineto
526 105.5 lineto
fill
grestore
gsave
466 215 moveto
424.889087296526 173.889087296526 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
421 170 moveto
430.899494936612 174.242640687119 lineto
427.717514421272 175.303300858899 lineto
426.303300858899 176.717514421272 lineto
425.242640687119 179.899494936612 lineto
421 170 lineto
fill
grestore
gsave
496 215 moveto
537.110912703474 173.889087296526 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
541 170 moveto
536.757359312881 179.899494936612 lineto
535.696699141101 176.717514421272 lineto
534.282485578728 175.303300858899 lineto
531.100505063388 174.242640687119 lineto
541 170 lineto
fill
grestore
gsave
301 215 moveto
301 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
301 165.5 moveto
305 175.5 lineto
302 174 lineto
300 174 lineto
297 175.5 lineto
301 165.5 lineto
fill
grestore
gsave
331 215 moveto
445.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
451 215 moveto
441 219 lineto
442.5 216 lineto
442.5 214 lineto
441 211 lineto
451 215 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220.5 226 [
    (s)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
280.5 218 moveto
226 218 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
286 218 moveto
276 222 lineto
277.5 219 lineto
277.5 217 lineto
276 214 lineto
286 218 lineto
fill
grestore
restore showpage

end
%%EndDocument

 endTexFig
 399 1319 a Fi(Figure)c(5:)k(Y)m(ou)c(can)g(tell)f(the)i(algorithm)c
(ho)o(w)i(to)h(dra)o(w)g(the)g(structure)0 1446 y Ff(Set)t
Fi(!)23 b(is)16 b(also)f(rede\014ned)i(so)f(that)g(if)f(y)o(ou)g(mo)q
(dify)e(the)k(binding)d(of)h(a)h(view)o(ed)f(sym)o(b)q(ol)f(it)i(will)e
(up)q(date)i(the)g(diagram.)21 b(If)0 1496 y(y)o(ou)13
b(view)g(something)f(that)h(is)g(not)g(b)q(ound)h(b)o(y)f(a)g(sym)o(b)q
(ol,)e(it)i(will)f(b)q(e)h(diagrammed)e(with)h Fd(#)p
Fi([no)h(binding])f(as)h(its)g(sym)o(b)q(ol.)0 1545 y(If)h(y)o(ou)g
(rede\014ne)i(something)d(whic)o(h)i(has)f(b)q(een)i(view)o(ed,)e(it)g
(will)f(not)i(up)q(date)g(the)g(diagram,)c(if)j(y)o(ou)g(feel)h(this)f
(is)g(really)g(a)0 1595 y(problem)f(send)h(me)f(a)h(complain)o(t.)0
1681 y(If)f(y)o(ou)g(ha)o(v)o(e)g(m)o(utated)f(a)h(list)g(suc)o(h)h
(that)g(there)g(are)g(cells)g(on)f(the)h(diagram)d(whic)o(h)i(are)h
(not)f(p)q(oin)o(ted)g(to)h(b)o(y)f(an)o(ything)f(on)0
1731 y(the)h(diagram,)d(they)j(will)e(b)q(e)i(mark)o(ed)f(b)o(y)g
(stippling)g(the)h(b)q(o)q(dy)f(of)g(the)i(cell)e(and)g(dark)o(ening)h
(it.)k(Y)m(ou)12 b(can)h(delete)g(it)f(in)g(the)0 1780
y(same)h(metho)q(d)h(describ)q(ed)h(ab)q(o)o(v)o(e.)k(Press)d(Button-3)
e(and)g(y)o(ou)f(will)g(delete)i(it)f(and)g(an)o(ything)f(that)h(p)q
(oin)o(ts)g(to)g(it)g(or)g(that)0 1830 y(it)e(p)q(oin)o(ts)h(to.)k(Ho)o
(w)c(can)g(an)o(ything)e(p)q(oin)o(t)i(to)f(it?)18 b(P)o(oin)o(ters)13
b(sta)o(y)f(around)h(after)g Ff(set-)i(c)n(ar!)i Fi(and)12
b Ff(set-c)n(dr!)17 b Fi(act)c(up)q(on)g(a)g(cell,)0
1880 y(though)i(dark)o(ened)h(and)f(thinned.)22 b(It)15
b(is)g(also)g(p)q(ossible)g(that)g(another)h(sym)o(b)q(ol)d(is)i(b)q
(ound)g(to)g(that)g(data)g(though)g(it)g(has)0 1930 y(b)q(een)g(mark)o
(ed)f(as)g(garbage)g(in)g(the)h(diagram.)i(If)c(y)o(ou)h(someho)o(w)f
(try)i(to)f(view)g(that)h(data)e(after)i(it)f(has)g(b)q(een)i(mark)o
(ed)d(as)0 1980 y(garbage,)h(it)h(will)f(unmark)f(itself)i(prop)q(erly)
m(.)21 b(If)14 b(y)o(ou)h(do)g(not)f(lik)o(e)h(k)o(eeping)g(garbage)f
(around)h(on)g(the)g(diagram,)e(there)j(is)0 2029 y(a)f(v)n(ariable)e
Ff(GARBA)o(GE)p 407 2029 13 2 v 16 w(COLLECT?)19 b Fi(whic)o(h)c(is)g
(false)f(b)o(y)h(default)f(whic)o(h)h(tells)g(it)f(whether)j(to)d
(automatically)e(delete)0 2079 y(garbage)17 b(from)e(the)j(diagram.)25
b(It)17 b(is)g(set)h(in)f(the)h(En)o(vDra)o(w/view.stk)e(\014le,)h
(relativ)o(e)g(to)g(the)h(library)e(directory)m(,)i(along)0
2129 y(with)c(a)f(few)h(other)h(user-customizable)f(v)n(ariables.)78
2252 y Fe(\(define)j(weird)118 2298 y(\(let)h(\(\(it)g(\(cons)g('left)f
('right\)\))g(\(it2)h(\(cons)f('left)h('right\)\)\))157
2343 y(\(set-cdr!)e(it)j(it2\))157 2389 y(\(set-car!)d(it2)j(it\))157
2435 y(\(list)f(it)g(it2)h(it\)\)\))965 2799 y Fi(5)p
eop
%%Page: 6 6
6 5 bop 302 50 a
 21247508 13551043 9538355 19274055 30785863 32825098 startTexFig
 302 50 a
%%BeginDocument: figs/diag6.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
348 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
348 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
318 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
318 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
438 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
438 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
408 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
408 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
528 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
528 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
498 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
498 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
348 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
348 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
318 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
318 170 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
423 110 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
423 110 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
393 110 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
393 110 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
288 110 [
    (left)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
483 50 [
    (right)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
408 95 moveto
352.4 136.7 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
348 140 moveto
353.6 130.8 lineto
354.2 134.1 lineto
355.4 135.7 lineto
358.4 137.2 lineto
348 140 lineto
fill
grestore
gsave
438 95 moveto
479.110912703474 53.889087296526 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
483 50 moveto
478.757359312881 59.8994949366116 lineto
477.696699141101 56.7175144212722 lineto
476.282485578728 55.3033008588991 lineto
473.100505063388 54.2426406871193 lineto
483 50 lineto
fill
grestore
gsave
333 155 moveto
291.889087296526 113.889087296526 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
288 110 moveto
297.899494936612 114.242640687119 lineto
294.717514421272 115.303300858899 lineto
293.303300858899 116.717514421272 lineto
292.242640687119 119.899494936612 lineto
288 110 lineto
fill
grestore
gsave
363 155 moveto
418.6 113.3 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
423 110 moveto
417.4 119.2 lineto
416.8 115.9 lineto
415.6 114.3 lineto
412.6 112.8 lineto
423 110 lineto
fill
grestore
gsave
528 200 moveto
558 230 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
513 215 moveto
353.306201016808 171.447145731857 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
348 170 moveto
358.700107835546 168.77211877297 lineto
356.463609886313 171.271734127995 lineto
355.937375074729 173.201261770471 lineto
356.595168589209 176.490229342872 lineto
348 170 lineto
fill
grestore
gsave
423 215 moveto
423 115.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
423 110 moveto
427 120 lineto
424 118.5 lineto
422 118.5 lineto
419 120 lineto
423 110 lineto
fill
grestore
gsave
453 215 moveto
492.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
498 215 moveto
488 219 lineto
489.5 216 lineto
489.5 214 lineto
488 211 lineto
498 215 lineto
fill
grestore
gsave
333 215 moveto
333 175.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
333 170 moveto
337 180 lineto
334 178.5 lineto
332 178.5 lineto
329 180 lineto
333 170 lineto
fill
grestore
gsave
363 215 moveto
402.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
408 215 moveto
398 219 lineto
399.5 216 lineto
399.5 214 lineto
398 211 lineto
408 215 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
236.5 226 [
    (weird)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
312.5 218 moveto
258 218 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
318 218 moveto
308 222 lineto
309.5 219 lineto
309.5 217 lineto
308 214 lineto
318 218 lineto
fill
grestore
restore showpage

end
%%EndDocument

 endTexFig
 758 999 a Fi(Figure)14 b(6:)k(View)c(of)f Ff(weir)n(d)0
1172 y Fg(3)67 b(En)n(vDra)n(w)0 1299 y Fi(The)13 b(second)h
(application)d(included)i(with)g(En)o(vDra)o(w,)f(from)f(whic)o(h)i(it)
f(deriv)o(es)i(its)e(name,)g(is)g(an)h(en)o(vironmen)o(t)e(diagram-)0
1349 y(mer.)19 b(This)c(can)g(b)q(e)g(started)h(b)o(y)e(t)o(yping)g
(\(En)o(vDra)o(w\))h(from)d(the)k Fc(STk)f Fi(prompt.)k(It)14
b(will)f(bring)i(up)f(a)h(top-lev)o(el)f(windo)o(w)0
1399 y(with)f(a)g(global)e(en)o(vironmen)o(t)i(frame)f(placed)h(in)g
(the)h(cen)o(ter.)19 b(The)14 b(top-lev)o(el)f(windo)o(w)f(also)h(con)o
(tains)g(a)g(listb)q(o)o(x,)f(a)h(lab)q(el,)0 1449 y(and)g(5)f(buttons)
h(lab)q(eled)g Ff(step)s Fi(,)f Ff(c)n(ontinue)t Fi(,)h
Ff(stepping)t Fi(,)f Ff(c)n(olors)s Fi(,)h(and)f Ff(exit)t
Fi(.)18 b(The)13 b(lab)q(el)f(pro)o(vides)h(the)g(same)f(t)o(yp)q(e)i
(of)e(output)0 1498 y(as)i(it)f(did)g(in)g(the)h(b)q(o)o(x)g(and)f(p)q
(oin)o(ter)h(application.)i(The)e Ff(step)i Fi(and)e
Ff(c)n(ontinue)j Fi(buttons)d(will)e(step)j(the)f(ev)n(aluator)f
(through)0 1548 y(ev)n(aluation.)k Ff(Step)g Fi(will)12
b(adv)n(ance)i(on)g(step.)19 b Ff(Continue)e Fi(will)c(con)o(tin)o(ue)h
(ev)n(aluation)e(un)o(til)h(the)i(REPL)f(\014nishes.)19
b Ff(Stepping)0 1598 y Fi(toggles)10 b(whether)i(or)e(not)h(to)f(step)h
(at)g(all.)k Ff(c)n(olors)e Fi(b)q(eha)o(v)o(es)f(exactly)e(lik)o(e)g
(in)g(the)h(view)f(application.)16 b Ff(Exit)e Fi(lea)o(v)o(es)c(En)o
(vDra)o(w)0 1648 y(and)k Fc(STk)p Fi(.)0 1733 y(View)h(will)f(not)h(w)o
(ork)g(inside)g(the)h(metacircular)e(ev)n(aluator,)h(as)g(macros)f
(aren't)i(supp)q(orted,)g(and)f(view)g(is)g(a)g(macro.)21
b(It)0 1783 y(should)14 b(not)f(b)q(e)i(neccesary)h(to)e(view)f(an)o
(ything)g(though,)h(as)g(all)e(data)i(is)g(diagramm)o(ed.)0
1869 y(Y)m(ou)h(will)f(b)q(e)j(placed)f(in)f(a)g(metacircular)g(ev)n
(aluator)g(where)i(ev)o(erything)f(y)o(ou)f(ev)n(aluate)h(is)f(traced)i
(and)e(dra)o(wn.)24 b(When)0 1919 y(something)13 b(is)h(en)o(tered)i
(to)e(the)g(REPL)h(it)e(will)g(b)q(e)i(ev)n(aluated,)e(tracing)h(the)h
(ev)n(aluation)e(in)h(the)g(listb)q(o)o(x)g(in)f(the)i(windo)o(w.)0
1968 y(If)d(stepping)h(is)g(enabled,)f(it)h(will)e(pause)i(at)f(eac)o
(h)h(call)f(to)h(apply)m(,)e(announcing)h(whether)i(a)e(primitiv)o(e)f
(\(or)h(an)o(y)g(underlying)0 2018 y(applicable)k(ob)r(ject\))j(is)e(b)
q(eing)g(applied)g(or)g(whether)i(a)e(lam)o(b)q(da)e(expression)k
(created)f(in)f(the)h(metacircular)f(ev)n(aluator)0 2068
y(is)h(b)q(eing)g(applied.)31 b(En)o(vironmen)o(t)17
b(diagrams)f(are)i(dra)o(wn)h(just)f(as)g(in)g(Structure)i(and)e(In)o
(terpretation)h(of)f(Computer)0 2118 y(Programs.)e(En)o(vironemen)o(t)c
(frames,)f(pro)q(cedures,)k(and)d(list)g(structures)j(whic)o(h)d(ha)o
(v)o(e)h(b)q(ecome)f(garbage)g(will)f(b)q(e)i(mark)o(ed)0
2168 y(as)e(suc)o(h)g(in)g(the)g(same)f(manner)g(as)h(the)g(view)f
(application.)16 b(Button-1)11 b(mo)o(v)o(es)e(an)i(ob)r(ject)g(and)g
(its)g(decsendan)o(ts.)19 b(Button-2)0 2217 y(mo)o(v)o(es)13
b(just)h(one)g(ob)r(ject.)19 b(Button-3)14 b(will)e(delete)j(garbage.)
78 2340 y Fe(>)20 b(\(define)d(make-coun)o(te)o(r)157
2386 y(\(let)h(\(\(count)f(0\)\))196 2432 y(\(lambda)g(\(\))78
2477 y(\(let)i(\(\(local-)o(cou)o(nt)d(0\)\))118 2523
y(\(lambda)h(\(n\))157 2569 y(\(set!)h(count)f(\(+)i(count)f(n\)\))157
2614 y(\(set!)g(local-cou)o(nt)e(\(+)j(local-cou)o(nt)d
(n\)\)\)\)\)\)\))78 2660 y(make-counte)o(r)965 2799 y
Fi(6)p eop
%%Page: 7 7
7 6 bop 78 91 a Fe(>)20 b(\(define)d(c1)h(\(make-count)o(er)o(\)\))78
137 y(c1)78 183 y(>)i(\(c1)e(3\))78 228 y(3)78 274 y(>)i(\(c1)e(4\))78
320 y(7)78 365 y(>)i(\(define)d(c2)h(\(make-count)o(er)o(\)\))78
411 y(c2)78 457 y(>)i(\(c2)e(5\))78 502 y(5)78 548 y(>)i(\(c2)e(6\))78
594 y(11)75 815 y
 28417720 16766453 1184071 14669332 39140147 37429821 startTexFig
 75 815 a
%%BeginDocument: figs/diag7.ps

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

/CL 2 def

save
306.0 396.0 translate
0.68 0.68 scale
-1517 -253 translate
1094 507 moveto 1941 507 lineto 1941 0 lineto 1094 0 lineto closepath clip newpath
gsave
1265 235 moveto 150 0 rlineto 0 -200 rlineto -150 0 rlineto closepath
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
1265 235 moveto 150 0 rlineto 0 -200 rlineto -150 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1270 219 [
    (GLOBAL ENVIRONMENT)
] 16 0 0.5 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1270 203 [
    ([other bindings])
] 16 0 0.5 0 () false DrawText
grestore
gsave
matrix currentmatrix
1331 328 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
matrix currentmatrix
1331 328 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
matrix currentmatrix
1301 328 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
matrix currentmatrix
1301 328 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1286 283 [
    (args: \050count\051)
    ()
] 14 0 0.5 0 () false DrawText
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1286 275 [
    (body: \050lambda \050\051 \050l ...)
] 14 0 0.5 0 () false DrawText
grestore
gsave
1301 328 moveto
1301 303.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1301 298 moveto
1305 308 lineto
1302 306.5 lineto
1300 306.5 lineto
1297 308 lineto
1301 298 lineto
fill
grestore
gsave
1331 328 moveto
1331 358 lineto
1361 358 lineto
1361 239.857142857143 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.397 0.397 0.190 setrgbcolor AdjustColor
stroke
1361 235 moveto
1364.5 245 lineto
1361.5 243.285714285714 lineto
1360.5 243.285714285714 lineto
1357.5 245 lineto
1361 235 lineto
fill
grestore
gsave
1161 365 moveto 112 0 rlineto 0 -100 rlineto -112 0 rlineto closepath
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
1161 365 moveto 112 0 rlineto 0 -100 rlineto -112 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1166 349 [
    (E1)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1265 240.5 moveto
1265 265 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1265 235 moveto
1269 245 lineto
1266 243.5 lineto
1264 243.5 lineto
1261 245 lineto
1265 235 lineto
fill
grestore
gsave
matrix currentmatrix
1141 217 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
matrix currentmatrix
1141 217 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
matrix currentmatrix
1111 217 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
matrix currentmatrix
1111 217 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1096 172 [
    (args: \050\051)
    ()
] 14 0 0.5 0 () false DrawText
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1096 164 [
    (body: \050let \050\050local- ...)
] 14 0 0.5 0 () false DrawText
grestore
gsave
1111 217 moveto
1111 192.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1111 187 moveto
1115 197 lineto
1112 195.5 lineto
1110 195.5 lineto
1107 197 lineto
1111 187 lineto
fill
grestore
gsave
1141 217 moveto
1141 247 lineto
1141 280 lineto
1155.5 280 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1161 280 moveto
1151 284 lineto
1152.5 281 lineto
1152.5 279 lineto
1151 276 lineto
1161 280 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1270 187 [
    (make-counter)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1268 187 moveto
1245 187 lineto
1245 217 lineto
1161.5 217 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1156 217 moveto
1166 213 lineto
1164.5 216 lineto
1164.5 218 lineto
1166 221 lineto
1156 217 lineto
fill
grestore
gsave
1294 490 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
1294 490 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1299 474 [
    (E2)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1278.5 350 moveto
1309 350 lineto
1309 390 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1273 350 moveto
1283 346 lineto
1281.5 349 lineto
1281.5 351 lineto
1283 354 lineto
1273 350 lineto
fill
grestore
gsave
matrix currentmatrix
1189 475 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
matrix currentmatrix
1189 475 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
matrix currentmatrix
1159 475 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
matrix currentmatrix
1159 475 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1144 430 [
    (args: \050local-count\051)
    ()
] 14 0 0.5 0 () false DrawText
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1144 422 [
    (body: \050lambda \050n\051 \050 ...)
] 14 0 0.5 0 () false DrawText
grestore
gsave
1159 475 moveto
1159 450.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1159 445 moveto
1163 455 lineto
1160 453.5 lineto
1158 453.5 lineto
1155 455 lineto
1159 445 lineto
fill
grestore
gsave
1189 475 moveto
1189 505 lineto
1309 505 lineto
1309 494.857142857143 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.397 0.397 0.190 setrgbcolor AdjustColor
stroke
1309 490 moveto
1312.5 500 lineto
1309.5 498.285714285714 lineto
1308.5 498.285714285714 lineto
1305.5 500 lineto
1309 490 lineto
fill
grestore
gsave
1426 489 moveto 152 0 rlineto 0 -100 rlineto -152 0 rlineto closepath
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
1426 489 moveto 152 0 rlineto 0 -100 rlineto -152 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1431 473 [
    (E3)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1399.5 439.5 moveto
1426 439.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1394 439.5 moveto
1404 435.5 lineto
1402.5 438.5 lineto
1402.5 440.5 lineto
1404 443.5 lineto
1394 439.5 lineto
fill
grestore
gsave
matrix currentmatrix
1491 344 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
matrix currentmatrix
1491 344 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
matrix currentmatrix
1461 344 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
matrix currentmatrix
1461 344 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1446 299 [
    (args: \050n\051)
    ()
] 14 0 0.5 0 () false DrawText
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1446 291 [
    (body: \050set! count \050 ...)
] 14 0 0.5 0 () false DrawText
grestore
gsave
1461 344 moveto
1461 319.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1461 314 moveto
1465 324 lineto
1462 322.5 lineto
1460 322.5 lineto
1457 324 lineto
1461 314 lineto
fill
grestore
gsave
1491 344 moveto
1491 374 lineto
1491 383.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1491 389 moveto
1487 379 lineto
1490 380.5 lineto
1492 380.5 lineto
1495 379 lineto
1491 389 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1270 171 [
    (c1)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1289 171 moveto
1420 171 lineto
1420 240 lineto
1420 344 lineto
1440.5 344 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1446 344 moveto
1436 348 lineto
1437.5 345 lineto
1437.5 343 lineto
1436 340 lineto
1446 344 lineto
fill
grestore
gsave
1596 359 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
1596 359 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1601 343 [
    (E4)
] 16 0 0.5 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1601 327 [
    (n)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1612 327 moveto
1674.5 327 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1680 327 moveto
1670 331 lineto
1671.5 328 lineto
1671.5 326 lineto
1670 323 lineto
1680 327 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1685 327 [
    (3)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1583.5 404 moveto
1611 404 lineto
1611 359 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1578 404 moveto
1588 400 lineto
1586.5 403 lineto
1586.5 405 lineto
1588 408 lineto
1578 404 lineto
fill
grestore
gsave
1616 489 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
1616 489 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1621 473 [
    (E5)
] 16 0 0.5 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1621 457 [
    (n)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1632 457 moveto
1694.5 457 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1700 457 moveto
1690 461 lineto
1691.5 458 lineto
1691.5 456 lineto
1690 453 lineto
1700 457 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1705 457 [
    (4)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1583.5 439 moveto
1616 439 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1578 439 moveto
1588 435 lineto
1586.5 438 lineto
1586.5 440 lineto
1588 443 lineto
1578 439 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1431 457 [
    (local-count)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1522 457 moveto
1556.5 457 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1562 457 moveto
1552 461 lineto
1553.5 458 lineto
1553.5 456 lineto
1552 453 lineto
1562 457 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1567 457 [
    (7)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1748 466 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
1748 466 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1753 450 [
    (E6)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1258 370.5 moveto
1258 381 lineto
1748 381 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1258 365 moveto
1262 375 lineto
1259 373.5 lineto
1257 373.5 lineto
1254 375 lineto
1258 365 lineto
fill
grestore
gsave
matrix currentmatrix
1850 270 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
matrix currentmatrix
1850 270 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
matrix currentmatrix
1820 270 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
matrix currentmatrix
1820 270 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1805 225 [
    (args: \050local-count\051)
    ()
] 14 0 0.5 0 () false DrawText
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1805 217 [
    (body: \050lambda \050n\051 \050 ...)
] 14 0 0.5 0 () false DrawText
grestore
gsave
1820 270 moveto
1820 245.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1820 240 moveto
1824 250 lineto
1821 248.5 lineto
1819 248.5 lineto
1816 250 lineto
1820 240 lineto
fill
grestore
gsave
1850 270 moveto
1850 300 lineto
1850 381 lineto
1852.85714285714 381 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.397 0.397 0.190 setrgbcolor AdjustColor
stroke
1848 381 moveto
1858 377.5 lineto
1856.28571428571 380.5 lineto
1856.28571428571 381.5 lineto
1858 384.5 lineto
1848 381 lineto
fill
grestore
gsave
1594 232 moveto 160 0 rlineto 0 -100 rlineto -160 0 rlineto closepath
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
1594 232 moveto 160 0 rlineto 0 -100 rlineto -160 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1599 216 [
    (E7)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1751 360.5 moveto
1751 232 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1751 366 moveto
1747 356 lineto
1750 357.5 lineto
1752 357.5 lineto
1755 356 lineto
1751 366 lineto
fill
grestore
gsave
matrix currentmatrix
1662 75 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
matrix currentmatrix
1662 75 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
matrix currentmatrix
1632 75 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
0.794 0.794 0.587 setrgbcolor AdjustColor
fill
matrix currentmatrix
1632 75 translate 15 15 scale 1 0 moveto 0 0 1 0 360 arc
setmatrix
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1617 30 [
    (args: \050n\051)
    ()
] 14 0 0.5 0 () false DrawText
grestore
gsave
/Helvetica-Bold findfont 12 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1617 22 [
    (body: \050set! count \050 ...)
] 14 0 0.5 0 () false DrawText
grestore
gsave
1632 75 moveto
1632 50.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1632 45 moveto
1636 55 lineto
1633 53.5 lineto
1631 53.5 lineto
1628 55 lineto
1632 45 lineto
fill
grestore
gsave
1662 75 moveto
1662 105 lineto
1662 126.5 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1662 132 moveto
1658 122 lineto
1661 123.5 lineto
1663 123.5 lineto
1666 122 lineto
1662 132 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1270 155 [
    (c2)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1289 155 moveto
1429 155 lineto
1626.76196687487 91.6772027247948 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1632 90 moveto
1623.69608720871 96.8589381360839 lineto
1624.20980384749 93.544410233797 lineto
1623.59991194757 91.6396709155686 lineto
1621.25651960901 89.2399808631701 lineto
1632 90 lineto
fill
grestore
gsave
1464 232 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
1464 232 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1469 216 [
    (E8)
] 16 0 0.5 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1469 200 [
    (n)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1480 200 moveto
1542.5 200 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1548 200 moveto
1538 204 lineto
1539.5 201 lineto
1539.5 199 lineto
1538 196 lineto
1548 200 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1553 200 [
    (5)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1588.5 182 moveto
1564 182 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1594 182 moveto
1584 186 lineto
1585.5 183 lineto
1585.5 181 lineto
1584 178 lineto
1594 182 lineto
fill
grestore
gsave
1446 102 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
0.587 0.587 0.397 setrgbcolor AdjustColor
16 16 <222288882222888822228888222288882222888822228888222288882222
8888> true StippleFill
1446 102 moveto 100 0 rlineto 0 -100 rlineto -100 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1451 86 [
    (E9)
] 16 0 0.5 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1451 70 [
    (n)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1462 70 moveto
1524.5 70 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1530 70 moveto
1520 74 lineto
1521.5 71 lineto
1521.5 69 lineto
1520 66 lineto
1530 70 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1535 70 [
    (6)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1609 126.5 moveto
1609 87 lineto
1546 87 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1609 132 moveto
1605 122 lineto
1608 123.5 lineto
1610 123.5 lineto
1613 122 lineto
1609 132 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1166 333 [
    (count)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1209 333 moveto
1243.5 333 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1249 333 moveto
1239 337 lineto
1240.5 334 lineto
1240.5 332 lineto
1239 329 lineto
1249 333 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1254 333 [
    (18)
] 16 0 0.5 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1599 200 [
    (local-count)
] 16 0 0.5 0 () false DrawText
grestore
gsave
1690 200 moveto
1724.5 200 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.587 0.587 0.397 setrgbcolor AdjustColor
stroke
1730 200 moveto
1720 204 lineto
1721.5 201 lineto
1721.5 199 lineto
1720 196 lineto
1730 200 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
1735 200 [
    (11)
] 16 0 0.5 0 () false DrawText
grestore
restore showpage

end
%%EndDocument

 endTexFig
 618 1968 a Fi(Figure)c(7:)k(Sample)12 b(en)o(vironmen)o(t)h(diagram)0
2091 y(The)j(meta-ev)n(aluator)d(pro)o(vides)j(sev)o(eral)f(built-in)f
(pro)q(cedures.)25 b Ff(L)n(o)n(ad)20 b Fi(will)14 b(load)g(a)h(sc)o
(heme)g(source)i(\014le)e(in)o(to)g(the)h(ev)n(al-)0
2141 y(uator.)27 b Ff(Display)21 b Fi(and)16 b Ff(print)21
b Fi(are)c(the)g(only)f(prop)q(erly)i(de\014ned)g(output)f(functions.)
27 b Ff(Stacktr)n(ac)n(e)19 b Fi(will)d(displa)o(y)g(the)h(last)0
2191 y(few)e(calls)g(to)g Ff(eval)t Fi(.)22 b(The)15
b(ev)n(aluator)f(is)h(fairly)f(complete,)g(pro)o(viding)g(most)g(of)h
(the)g Ff(R)1379 2176 y Fb(4)1391 2191 y Fa(RS)r Fi(sp)q(ecial)h
(forms.)k Ff(L)n(etr)n(e)n(c)d Fi(is)e(not)0 2241 y(supp)q(orted.)22
b Ff(Cal)r(l/c)n(c)17 b Fi(is)d(also)h(pro)o(vided.)20
b Ff(Print-c)n(anvas)f Fi(will)13 b(try)i(to)g(prin)o(t)g(the)g(can)o
(v)n(as)g(to)f(a)h(p)q(ostscript)h(prin)o(ter)f(using)0
2290 y(a)f(SVR)h(st)o(yle)f(lp)h(command)c(and)k(the)g(LPDEST)g(en)o
(vironmen)o(t)e(v)n(ariable)h(\(the)h(-d)g(\015ag)f(sp)q(eci\014es)i
(prin)o(ter)f(destination\),)0 2340 y(or)f(optionally)m(,)d(prin)o(t)j
(a)f(p)q(ostscript)i(\014le)f(to)g(a)f(\014le)h(named)f(b)o(y)h(an)f
(argumen)o(t.)0 2426 y(The)g(meta-ev)n(aluator)e(is)h(equipp)q(ed)i
(for)e(catc)o(hing)h(and)f(prin)o(ting)g(error)i(messages,)e(ho)o(w)o
(ev)o(er)h(the)g(lac)o(k)g(of)f(error)h(handling)0 2476
y(supp)q(ort)18 b(in)e Fc(STk)i Fi(created)g(a)f(problem)e(in)i(this)g
(resp)q(ect.)29 b(Unless)18 b(y)o(ou)f(can)g(recompile)f
Fc(STk)h Fi(with)g(a)f(small)f(patc)o(h)i(to)0 2525 y(error.c,)i(an)f
(error)h(in)e(the)h(meta-ev)n(aluator)e(will)h(bring)g(y)o(ou)g(bac)o
(k)h(to)g(the)g Fc(STk)h Fi(REPL.)e(The)h(patc)o(h)g(to)g(error.c)h
(sets)0 2575 y(t)o(w)o(o)g(global)g(v)n(ariables)g(with)g(the)i(error)f
(messages.)36 b(Not)20 b(a)f(v)o(ery)i(elegan)o(t)e(solution,)h(but)g
(it)g(w)o(orks.)36 b(The)20 b(v)n(ariable)0 2625 y Ff(*meta-debug*)f
Fi(toggles)12 b(whether)i(to)e(use)h(this)f(error)h(handling.)j(If)c
(the)g(patc)o(h)h(has)f(b)q(een)h(applied,)f(it)g(will)e(prin)o(t)i(an)
g(error)0 2675 y(message)i(and)g(return)i(to)e(the)i(prompt.)i(If)c
(the)h(patc)o(h)g(has)g(not)f(b)q(een)i(applied,)d(y)o(ou)h(can)h
(re-en)o(ter)h(the)f(meta)f(REPL)g(b)o(y)965 2799 y(7)p
eop
%%Page: 8 8
8 7 bop 0 91 a Fi(t)o(yping)15 b(\(driv)o(er-lo)q(op\).)22
b(The)15 b(patc)o(h)h(is)f(con)o(tained)h(in)e(the)i(distribution)f
(and)g(named)g(error.c.di\013s.)23 b(It)15 b(can)h(b)q(e)g(applied)0
141 y(with)e(the)g(Unix)g(\\patc)o(h")f(utilit)o(y)m(.)j(It)e(will)f
(automatically)e(detect)k(if)e(this)h(patc)o(h)g(has)g(b)q(een)h
(applied.)0 227 y(T)m(o)e(exit)h(the)g(ev)n(aluator)g(send)g(an)g(EOF,)
g(\(exit\),)g(or)g(hit)f(the)i(EXIT)f(button)g(on)g(the)g(top)g(of)f
(the)i(windo)o(w.)965 2799 y(8)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
