%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Josh MacDonald,,,
%%Title: Window .v1.v2.v11
%%CreationDate: Sun Sep  3 04:11:41 1995
%%BoundingBox: 145 293 468 499
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Fixed
%%EndComments

% This file contains the standard Postscript prolog used when
% generating Postscript from canvas widgets.
%
% $Header: /amd/nfs/cory/home/hearst/users/jmacd/lib/stk/2.1.7/STk/RCS/prolog.ps,v 1.1 1995/07/24 20:00:59 jmacd Exp jmacd $ SPRITE (Berkeley);

%%BeginProlog
50 dict begin

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/maxwidth 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def
/encoding {ISOLatin1Encoding} def

% Override setfont to automatically encode the font in the style defined by 
% by 'encoding' (ISO Latin1 by default).

systemdict /encodefont known {
    /realsetfont /setfont load def
    /setfont {
	encoding encodefont realsetfont
    } def
} if

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string filled StippleFill --
%
% Given a path and other graphics information already set up, this
% procedure will fill the current path in a stippled fashion.  "String"
% contains a proper image description of the stipple pattern and
% "width" and "height" give its dimensions.  If "filled" is true then
% it means that the area to be stippled is gotten by filling the
% current path (e.g. the interior of a polygon); if it's false, the
% area is gotten by stroking the current path (e.g. a wide line).
% Each stipple dot is assumed to be about one unit across in the
% current user coordinate system.

/StippleFill {
    % Turn the path into a clip region that we can then cover with
    % lots of images corresponding to the stipple pattern.  Warning:
    % some Postscript interpreters get errors during strokepath for
    % dashed lines.  If this happens, turn off dashes and try again.

    1 index /tmpstip exch def %% Works around NeWSprint bug

    gsave
    {eoclip}
    {{strokepath} stopped {grestore gsave [] 0 setdash strokepath} if clip}
    ifelse

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.

    pathbbox
    4 2 roll
    5 index div cvi 5 index mul 4 1 roll
    6 index div cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
    grestore
    newpath
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple stipimage DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.
% stipimage -	Image for stippling, if stipple is True.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipimage exch def
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /maxwidth 0 def
    strings {
	stringwidth pop
	dup maxwidth gt {/maxwidth exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    maxwidth xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify maxwidth mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	show
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Fixed
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
0.8371 0.8371 scale
-392 -122 translate
200 245 moveto 585 245 lineto 585 0 lineto 200 0 lineto closepath clip newpath
gsave
316 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
316 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
286 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
286 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
406 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
406 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
376 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
376 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
496 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
496 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
466 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
0.898 0.898 0.898 setrgbcolor AdjustColor
fill
466 230 moveto 30 0 rlineto 0 -30 rlineto -30 0 rlineto closepath
1 setlinewidth 0 setlinejoin 2 setlinecap
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
301 165.5 [
    (1)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
391 165.5 [
    (2)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
481 165.5 [
    (3)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
496 200 moveto
526 230 lineto
1 setlinewidth
0 setlinecap
1 setlinejoin
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
481 215 moveto
481 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
481 165.5 moveto
485 175.5 lineto
482 174 lineto
480 174 lineto
477 175.5 lineto
481 165.5 lineto
fill
grestore
gsave
391 215 moveto
391 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
391 165.5 moveto
395 175.5 lineto
392 174 lineto
390 174 lineto
387 175.5 lineto
391 165.5 lineto
fill
grestore
gsave
421 215 moveto
460.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
466 215 moveto
456 219 lineto
457.5 216 lineto
457.5 214 lineto
456 211 lineto
466 215 lineto
fill
grestore
gsave
301 215 moveto
301 171 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
301 165.5 moveto
305 175.5 lineto
302 174 lineto
300 174 lineto
297 175.5 lineto
301 165.5 lineto
fill
grestore
gsave
331 215 moveto
370.5 215 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
376 215 moveto
366 219 lineto
367.5 216 lineto
367.5 214 lineto
366 211 lineto
376 215 lineto
fill
grestore
gsave
/Fixed findfont 15 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220.5 226 [
    (l)
] 16 -0.5 0 0 () false DrawText
grestore
gsave
280.5 218 moveto
226 218 lineto
2 setlinewidth
0 setlinecap
1 setlinejoin
0.702 0.702 0.702 setrgbcolor AdjustColor
stroke
286 218 moveto
276 222 lineto
277.5 219 lineto
277.5 217 lineto
276 214 lineto
286 218 lineto
fill
grestore
restore showpage

%%Trailer
end
%%EOF
